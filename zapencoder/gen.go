// Code generated by tools. DO NOT EDIT.
package zapencoder

import "go.uber.org/zap/zapcore"
import "fmt"
import "strconv"
import "time"

func str(arg interface{}) string {
	switch v := arg.(type) {
	case []byte:
		return string(v)
	case bool:
		if v {
			return "1"
		}
		return "0"
	case *bool:
		if *v {
			return "1"
		}
		return "0"
	case float64:
		return strconv.FormatFloat(v, 'f', -1, 64)
	case *float64:
		return strconv.FormatFloat(*v, 'f', -1, 64)
	case float32:
		return strconv.FormatFloat(float64(v), 'f', -1, 32)
	case *float32:
		return strconv.FormatFloat(float64(*v), 'f', -1, 32)
	case int:
		return strconv.Itoa(v)
	case *int:
		return strconv.Itoa(*v)
	case int8:
		return strconv.FormatInt(int64(v), 10)
	case *int8:
		return strconv.FormatInt(int64(*v), 10)
	case int32:
		return strconv.FormatInt(int64(v), 10)
	case *int32:
		return strconv.FormatInt(int64(*v), 10)
	case int64:
		return strconv.FormatInt(v, 10)
	case *int64:
		return strconv.FormatInt(*v, 10)
	case uint:
		return strconv.FormatUint(uint64(v), 10)
	case *uint:
		return strconv.FormatUint(uint64(*v), 10)
	case uint8:
		return strconv.FormatUint(uint64(v), 10)
	case *uint8:
		return strconv.FormatUint(uint64(*v), 10)
	case uint32:
		return strconv.FormatUint(uint64(v), 10)
	case *uint32:
		return strconv.FormatUint(uint64(*v), 10)
	case uint64:
		return strconv.FormatUint(v, 10)
	case *uint64:
		return strconv.FormatUint(*v, 10)
	case string:
		return v
	case *string:
		return *v
	case time.Time:
		return v.Format(time.RFC3339Nano)
	case *time.Time:
		return (*v).Format(time.RFC3339Nano)
	}
	return fmt.Sprint(arg)
}

func addObject(encoder zapcore.ObjectEncoder, k, v interface{}) (err error) {
	switch vv := v.(type) {
	case zapcore.ArrayMarshaler:
		err = encoder.AddArray(str(k), vv)
	case zapcore.ObjectMarshaler:
		err = encoder.AddObject(str(k), vv)
	case []byte:
		encoder.AddByteString(str(k), vv)
	case bool:
		encoder.AddBool(str(k), vv)
	case *bool:
		encoder.AddBool(str(k), *vv)
	case complex128:
		encoder.AddComplex128(str(k), vv)
	case *complex128:
		encoder.AddComplex128(str(k), *vv)
	case complex64:
		encoder.AddComplex64(str(k), vv)
	case *complex64:
		encoder.AddComplex64(str(k), *vv)
	case time.Duration:
		encoder.AddDuration(str(k), vv)
	case *time.Duration:
		encoder.AddDuration(str(k), *vv)
	case float64:
		encoder.AddFloat64(str(k), vv)
	case *float64:
		encoder.AddFloat64(str(k), *vv)
	case float32:
		encoder.AddFloat32(str(k), vv)
	case *float32:
		encoder.AddFloat32(str(k), *vv)
	case int:
		encoder.AddInt(str(k), vv)
	case *int:
		encoder.AddInt(str(k), *vv)
	case int32:
		encoder.AddInt32(str(k), vv)
	case *int32:
		encoder.AddInt32(str(k), *vv)
	case int64:
		encoder.AddInt64(str(k), vv)
	case *int64:
		encoder.AddInt64(str(k), *vv)
	case int8:
		encoder.AddInt8(str(k), vv)
	case *int8:
		encoder.AddInt8(str(k), *vv)
	case uint:
		encoder.AddUint(str(k), vv)
	case *uint:
		encoder.AddUint(str(k), *vv)
	case uint32:
		encoder.AddUint32(str(k), vv)
	case *uint32:
		encoder.AddUint32(str(k), *vv)
	case uint64:
		encoder.AddUint64(str(k), vv)
	case *uint64:
		encoder.AddUint64(str(k), *vv)
	case uint8:
		encoder.AddUint8(str(k), vv)
	case *uint8:
		encoder.AddUint8(str(k), *vv)
	case string:
		encoder.AddString(str(k), vv)
	case *string:
		encoder.AddString(str(k), *vv)
	case time.Time:
		encoder.AddTime(str(k), vv)
	case *time.Time:
		encoder.AddTime(str(k), *vv)
	case uintptr:
		encoder.AddUintptr(str(k), vv)
	case *uintptr:
		encoder.AddUintptr(str(k), *vv)
	default:
		err = encoder.AddReflected(str(k), vv)
	}
	return err
}

func appendObject(encoder zapcore.ArrayEncoder, v interface{}) (err error) {
	switch vv := v.(type) {
	case zapcore.ArrayMarshaler:
		err = encoder.AppendArray(vv)
	case zapcore.ObjectMarshaler:
		err = encoder.AppendObject(vv)
	case []byte:
		encoder.AppendByteString(vv)
	case bool:
		encoder.AppendBool(vv)
	case *bool:
		encoder.AppendBool(*vv)
	case complex128:
		encoder.AppendComplex128(vv)
	case *complex128:
		encoder.AppendComplex128(*vv)
	case complex64:
		encoder.AppendComplex64(vv)
	case *complex64:
		encoder.AppendComplex64(*vv)
	case time.Duration:
		encoder.AppendDuration(vv)
	case *time.Duration:
		encoder.AppendDuration(*vv)
	case float64:
		encoder.AppendFloat64(vv)
	case *float64:
		encoder.AppendFloat64(*vv)
	case float32:
		encoder.AppendFloat32(vv)
	case *float32:
		encoder.AppendFloat32(*vv)
	case int:
		encoder.AppendInt(vv)
	case *int:
		encoder.AppendInt(*vv)
	case int32:
		encoder.AppendInt32(vv)
	case *int32:
		encoder.AppendInt32(*vv)
	case int64:
		encoder.AppendInt64(vv)
	case *int64:
		encoder.AppendInt64(*vv)
	case int8:
		encoder.AppendInt8(vv)
	case *int8:
		encoder.AppendInt8(*vv)
	case uint:
		encoder.AppendUint(vv)
	case *uint:
		encoder.AppendUint(*vv)
	case uint32:
		encoder.AppendUint32(vv)
	case *uint32:
		encoder.AppendUint32(*vv)
	case uint64:
		encoder.AppendUint64(vv)
	case *uint64:
		encoder.AppendUint64(*vv)
	case uint8:
		encoder.AppendUint8(vv)
	case *uint8:
		encoder.AppendUint8(*vv)
	case string:
		encoder.AppendString(vv)
	case *string:
		encoder.AppendString(*vv)
	case time.Time:
		encoder.AppendTime(vv)
	case *time.Time:
		encoder.AppendTime(*vv)
	case uintptr:
		encoder.AppendUintptr(vv)
	case *uintptr:
		encoder.AppendUintptr(*vv)
	case []interface{}:
		err = encoder.AppendArray(InterfaceSlice{vv})
	default:
		err = encoder.AppendReflected(vv)
	}
	return err
}


type IntSlice []int

func (s IntSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt(v)
	}
	return nil
}

type IntPointerSlice []*int

func (s IntPointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt(*v)
	}
	return nil
}

type Int8Slice []int8

func (s Int8Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt8(v)
	}
	return nil
}

type Int8PointerSlice []*int8

func (s Int8PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt8(*v)
	}
	return nil
}

type Int16Slice []int16

func (s Int16Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt16(v)
	}
	return nil
}

type Int16PointerSlice []*int16

func (s Int16PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt16(*v)
	}
	return nil
}

type Int32Slice []int32

func (s Int32Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt32(v)
	}
	return nil
}

type Int32PointerSlice []*int32

func (s Int32PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt32(*v)
	}
	return nil
}

type Int64Slice []int64

func (s Int64Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt64(v)
	}
	return nil
}

type Int64PointerSlice []*int64

func (s Int64PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendInt64(*v)
	}
	return nil
}

type UintSlice []uint

func (s UintSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint(v)
	}
	return nil
}

type UintPointerSlice []*uint

func (s UintPointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint(*v)
	}
	return nil
}

type Uint8Slice []uint8

func (s Uint8Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint8(v)
	}
	return nil
}

type Uint8PointerSlice []*uint8

func (s Uint8PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint8(*v)
	}
	return nil
}

type Uint16Slice []uint16

func (s Uint16Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint16(v)
	}
	return nil
}

type Uint16PointerSlice []*uint16

func (s Uint16PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint16(*v)
	}
	return nil
}

type Uint32Slice []uint32

func (s Uint32Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint32(v)
	}
	return nil
}

type Uint32PointerSlice []*uint32

func (s Uint32PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint32(*v)
	}
	return nil
}

type Uint64Slice []uint64

func (s Uint64Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint64(v)
	}
	return nil
}

type Uint64PointerSlice []*uint64

func (s Uint64PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUint64(*v)
	}
	return nil
}

type BoolSlice []bool

func (s BoolSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendBool(v)
	}
	return nil
}

type BoolPointerSlice []*bool

func (s BoolPointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendBool(*v)
	}
	return nil
}

type Complex64Slice []complex64

func (s Complex64Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendComplex64(v)
	}
	return nil
}

type Complex64PointerSlice []*complex64

func (s Complex64PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendComplex64(*v)
	}
	return nil
}

type Complex128Slice []complex128

func (s Complex128Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendComplex128(v)
	}
	return nil
}

type Complex128PointerSlice []*complex128

func (s Complex128PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendComplex128(*v)
	}
	return nil
}

type Float32Slice []float32

func (s Float32Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendFloat32(v)
	}
	return nil
}

type Float32PointerSlice []*float32

func (s Float32PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendFloat32(*v)
	}
	return nil
}

type Float64Slice []float64

func (s Float64Slice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendFloat64(v)
	}
	return nil
}

type Float64PointerSlice []*float64

func (s Float64PointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendFloat64(*v)
	}
	return nil
}

type UintptrSlice []uintptr

func (s UintptrSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUintptr(v)
	}
	return nil
}

type UintptrPointerSlice []*uintptr

func (s UintptrPointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendUintptr(*v)
	}
	return nil
}

type TimeSlice []time.Time

func (s TimeSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendTime(v)
	}
	return nil
}

type TimePointerSlice []*time.Time

func (s TimePointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendTime(*v)
	}
	return nil
}

type ByteStringSlice [][]byte

func (s ByteStringSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendByteString(v)
	}
	return nil
}

type ByteStringPointerSlice []*[]byte

func (s ByteStringPointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendByteString(*v)
	}
	return nil
}

type InterfaceSlice []interface{}

func (s InterfaceSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		err := appendObject(encoder, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type StringSlice []string

func (s StringSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendString(v)
	}
	return nil
}

type StringPointerSlice []*string

func (s StringPointerSlice) MarshalLogArray(encoder zapcore.ArrayEncoder) error {
	for _, v := range s {
		encoder.AppendString(*v)
	}
	return nil
}

type IntIntMap map[int]int
	
func (m IntIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type IntIntPointerMap map[int]*int
	
func (m IntIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type IntInt8Map map[int]int8
	
func (m IntInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type IntInt8PointerMap map[int]*int8
	
func (m IntInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type IntInt16Map map[int]int16
	
func (m IntInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type IntInt16PointerMap map[int]*int16
	
func (m IntInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type IntInt32Map map[int]int32
	
func (m IntInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type IntInt32PointerMap map[int]*int32
	
func (m IntInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type IntInt64Map map[int]int64
	
func (m IntInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type IntInt64PointerMap map[int]*int64
	
func (m IntInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type IntUintMap map[int]uint
	
func (m IntUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type IntUintPointerMap map[int]*uint
	
func (m IntUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type IntUint8Map map[int]uint8
	
func (m IntUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type IntUint8PointerMap map[int]*uint8
	
func (m IntUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type IntUint16Map map[int]uint16
	
func (m IntUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type IntUint16PointerMap map[int]*uint16
	
func (m IntUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type IntUint32Map map[int]uint32
	
func (m IntUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type IntUint32PointerMap map[int]*uint32
	
func (m IntUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type IntUint64Map map[int]uint64
	
func (m IntUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type IntUint64PointerMap map[int]*uint64
	
func (m IntUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type IntBoolMap map[int]bool
	
func (m IntBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type IntBoolPointerMap map[int]*bool
	
func (m IntBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type IntComplex64Map map[int]complex64
	
func (m IntComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type IntComplex64PointerMap map[int]*complex64
	
func (m IntComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type IntComplex128Map map[int]complex128
	
func (m IntComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type IntComplex128PointerMap map[int]*complex128
	
func (m IntComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type IntFloat32Map map[int]float32
	
func (m IntFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type IntFloat32PointerMap map[int]*float32
	
func (m IntFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type IntFloat64Map map[int]float64
	
func (m IntFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type IntFloat64PointerMap map[int]*float64
	
func (m IntFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type IntUintptrMap map[int]uintptr
	
func (m IntUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type IntUintptrPointerMap map[int]*uintptr
	
func (m IntUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type IntTimeMap map[int]time.Time
	
func (m IntTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type IntTimePointerMap map[int]*time.Time
	
func (m IntTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type IntByteStringMap map[int][]byte
	
func (m IntByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type IntByteStringPointerMap map[int]*[]byte
	
func (m IntByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type IntInterfaceMap map[int]interface{}

func (m IntInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type IntStringMap map[int]string
	
func (m IntStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type IntStringPointerMap map[int]*string
	
func (m IntStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type IntPointerIntMap map[*int]int
	
func (m IntPointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type IntPointerIntPointerMap map[*int]*int
	
func (m IntPointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type IntPointerInt8Map map[*int]int8
	
func (m IntPointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type IntPointerInt8PointerMap map[*int]*int8
	
func (m IntPointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type IntPointerInt16Map map[*int]int16
	
func (m IntPointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type IntPointerInt16PointerMap map[*int]*int16
	
func (m IntPointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type IntPointerInt32Map map[*int]int32
	
func (m IntPointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type IntPointerInt32PointerMap map[*int]*int32
	
func (m IntPointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type IntPointerInt64Map map[*int]int64
	
func (m IntPointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type IntPointerInt64PointerMap map[*int]*int64
	
func (m IntPointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type IntPointerUintMap map[*int]uint
	
func (m IntPointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type IntPointerUintPointerMap map[*int]*uint
	
func (m IntPointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type IntPointerUint8Map map[*int]uint8
	
func (m IntPointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type IntPointerUint8PointerMap map[*int]*uint8
	
func (m IntPointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type IntPointerUint16Map map[*int]uint16
	
func (m IntPointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type IntPointerUint16PointerMap map[*int]*uint16
	
func (m IntPointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type IntPointerUint32Map map[*int]uint32
	
func (m IntPointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type IntPointerUint32PointerMap map[*int]*uint32
	
func (m IntPointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type IntPointerUint64Map map[*int]uint64
	
func (m IntPointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type IntPointerUint64PointerMap map[*int]*uint64
	
func (m IntPointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type IntPointerBoolMap map[*int]bool
	
func (m IntPointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type IntPointerBoolPointerMap map[*int]*bool
	
func (m IntPointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type IntPointerComplex64Map map[*int]complex64
	
func (m IntPointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type IntPointerComplex64PointerMap map[*int]*complex64
	
func (m IntPointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type IntPointerComplex128Map map[*int]complex128
	
func (m IntPointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type IntPointerComplex128PointerMap map[*int]*complex128
	
func (m IntPointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type IntPointerFloat32Map map[*int]float32
	
func (m IntPointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type IntPointerFloat32PointerMap map[*int]*float32
	
func (m IntPointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type IntPointerFloat64Map map[*int]float64
	
func (m IntPointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type IntPointerFloat64PointerMap map[*int]*float64
	
func (m IntPointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type IntPointerUintptrMap map[*int]uintptr
	
func (m IntPointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type IntPointerUintptrPointerMap map[*int]*uintptr
	
func (m IntPointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type IntPointerTimeMap map[*int]time.Time
	
func (m IntPointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type IntPointerTimePointerMap map[*int]*time.Time
	
func (m IntPointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type IntPointerByteStringMap map[*int][]byte
	
func (m IntPointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type IntPointerByteStringPointerMap map[*int]*[]byte
	
func (m IntPointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type IntPointerInterfaceMap map[*int]interface{}

func (m IntPointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type IntPointerStringMap map[*int]string
	
func (m IntPointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type IntPointerStringPointerMap map[*int]*string
	
func (m IntPointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int8IntMap map[int8]int
	
func (m Int8IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int8IntPointerMap map[int8]*int
	
func (m Int8IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int8Int8Map map[int8]int8
	
func (m Int8Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int8Int8PointerMap map[int8]*int8
	
func (m Int8Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int8Int16Map map[int8]int16
	
func (m Int8Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int8Int16PointerMap map[int8]*int16
	
func (m Int8Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int8Int32Map map[int8]int32
	
func (m Int8Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int8Int32PointerMap map[int8]*int32
	
func (m Int8Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int8Int64Map map[int8]int64
	
func (m Int8Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int8Int64PointerMap map[int8]*int64
	
func (m Int8Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int8UintMap map[int8]uint
	
func (m Int8UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int8UintPointerMap map[int8]*uint
	
func (m Int8UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int8Uint8Map map[int8]uint8
	
func (m Int8Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int8Uint8PointerMap map[int8]*uint8
	
func (m Int8Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int8Uint16Map map[int8]uint16
	
func (m Int8Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int8Uint16PointerMap map[int8]*uint16
	
func (m Int8Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int8Uint32Map map[int8]uint32
	
func (m Int8Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int8Uint32PointerMap map[int8]*uint32
	
func (m Int8Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int8Uint64Map map[int8]uint64
	
func (m Int8Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int8Uint64PointerMap map[int8]*uint64
	
func (m Int8Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int8BoolMap map[int8]bool
	
func (m Int8BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int8BoolPointerMap map[int8]*bool
	
func (m Int8BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int8Complex64Map map[int8]complex64
	
func (m Int8Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int8Complex64PointerMap map[int8]*complex64
	
func (m Int8Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int8Complex128Map map[int8]complex128
	
func (m Int8Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int8Complex128PointerMap map[int8]*complex128
	
func (m Int8Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int8Float32Map map[int8]float32
	
func (m Int8Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int8Float32PointerMap map[int8]*float32
	
func (m Int8Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int8Float64Map map[int8]float64
	
func (m Int8Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int8Float64PointerMap map[int8]*float64
	
func (m Int8Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int8UintptrMap map[int8]uintptr
	
func (m Int8UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int8UintptrPointerMap map[int8]*uintptr
	
func (m Int8UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int8TimeMap map[int8]time.Time
	
func (m Int8TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int8TimePointerMap map[int8]*time.Time
	
func (m Int8TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int8ByteStringMap map[int8][]byte
	
func (m Int8ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int8ByteStringPointerMap map[int8]*[]byte
	
func (m Int8ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int8InterfaceMap map[int8]interface{}

func (m Int8InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int8StringMap map[int8]string
	
func (m Int8StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int8StringPointerMap map[int8]*string
	
func (m Int8StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int8PointerIntMap map[*int8]int
	
func (m Int8PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int8PointerIntPointerMap map[*int8]*int
	
func (m Int8PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int8PointerInt8Map map[*int8]int8
	
func (m Int8PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int8PointerInt8PointerMap map[*int8]*int8
	
func (m Int8PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int8PointerInt16Map map[*int8]int16
	
func (m Int8PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int8PointerInt16PointerMap map[*int8]*int16
	
func (m Int8PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int8PointerInt32Map map[*int8]int32
	
func (m Int8PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int8PointerInt32PointerMap map[*int8]*int32
	
func (m Int8PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int8PointerInt64Map map[*int8]int64
	
func (m Int8PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int8PointerInt64PointerMap map[*int8]*int64
	
func (m Int8PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int8PointerUintMap map[*int8]uint
	
func (m Int8PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int8PointerUintPointerMap map[*int8]*uint
	
func (m Int8PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int8PointerUint8Map map[*int8]uint8
	
func (m Int8PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int8PointerUint8PointerMap map[*int8]*uint8
	
func (m Int8PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int8PointerUint16Map map[*int8]uint16
	
func (m Int8PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int8PointerUint16PointerMap map[*int8]*uint16
	
func (m Int8PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int8PointerUint32Map map[*int8]uint32
	
func (m Int8PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int8PointerUint32PointerMap map[*int8]*uint32
	
func (m Int8PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int8PointerUint64Map map[*int8]uint64
	
func (m Int8PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int8PointerUint64PointerMap map[*int8]*uint64
	
func (m Int8PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int8PointerBoolMap map[*int8]bool
	
func (m Int8PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int8PointerBoolPointerMap map[*int8]*bool
	
func (m Int8PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int8PointerComplex64Map map[*int8]complex64
	
func (m Int8PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int8PointerComplex64PointerMap map[*int8]*complex64
	
func (m Int8PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int8PointerComplex128Map map[*int8]complex128
	
func (m Int8PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int8PointerComplex128PointerMap map[*int8]*complex128
	
func (m Int8PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int8PointerFloat32Map map[*int8]float32
	
func (m Int8PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int8PointerFloat32PointerMap map[*int8]*float32
	
func (m Int8PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int8PointerFloat64Map map[*int8]float64
	
func (m Int8PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int8PointerFloat64PointerMap map[*int8]*float64
	
func (m Int8PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int8PointerUintptrMap map[*int8]uintptr
	
func (m Int8PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int8PointerUintptrPointerMap map[*int8]*uintptr
	
func (m Int8PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int8PointerTimeMap map[*int8]time.Time
	
func (m Int8PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int8PointerTimePointerMap map[*int8]*time.Time
	
func (m Int8PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int8PointerByteStringMap map[*int8][]byte
	
func (m Int8PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int8PointerByteStringPointerMap map[*int8]*[]byte
	
func (m Int8PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int8PointerInterfaceMap map[*int8]interface{}

func (m Int8PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int8PointerStringMap map[*int8]string
	
func (m Int8PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int8PointerStringPointerMap map[*int8]*string
	
func (m Int8PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int16IntMap map[int16]int
	
func (m Int16IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int16IntPointerMap map[int16]*int
	
func (m Int16IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int16Int8Map map[int16]int8
	
func (m Int16Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int16Int8PointerMap map[int16]*int8
	
func (m Int16Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int16Int16Map map[int16]int16
	
func (m Int16Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int16Int16PointerMap map[int16]*int16
	
func (m Int16Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int16Int32Map map[int16]int32
	
func (m Int16Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int16Int32PointerMap map[int16]*int32
	
func (m Int16Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int16Int64Map map[int16]int64
	
func (m Int16Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int16Int64PointerMap map[int16]*int64
	
func (m Int16Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int16UintMap map[int16]uint
	
func (m Int16UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int16UintPointerMap map[int16]*uint
	
func (m Int16UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int16Uint8Map map[int16]uint8
	
func (m Int16Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int16Uint8PointerMap map[int16]*uint8
	
func (m Int16Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int16Uint16Map map[int16]uint16
	
func (m Int16Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int16Uint16PointerMap map[int16]*uint16
	
func (m Int16Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int16Uint32Map map[int16]uint32
	
func (m Int16Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int16Uint32PointerMap map[int16]*uint32
	
func (m Int16Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int16Uint64Map map[int16]uint64
	
func (m Int16Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int16Uint64PointerMap map[int16]*uint64
	
func (m Int16Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int16BoolMap map[int16]bool
	
func (m Int16BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int16BoolPointerMap map[int16]*bool
	
func (m Int16BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int16Complex64Map map[int16]complex64
	
func (m Int16Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int16Complex64PointerMap map[int16]*complex64
	
func (m Int16Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int16Complex128Map map[int16]complex128
	
func (m Int16Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int16Complex128PointerMap map[int16]*complex128
	
func (m Int16Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int16Float32Map map[int16]float32
	
func (m Int16Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int16Float32PointerMap map[int16]*float32
	
func (m Int16Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int16Float64Map map[int16]float64
	
func (m Int16Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int16Float64PointerMap map[int16]*float64
	
func (m Int16Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int16UintptrMap map[int16]uintptr
	
func (m Int16UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int16UintptrPointerMap map[int16]*uintptr
	
func (m Int16UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int16TimeMap map[int16]time.Time
	
func (m Int16TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int16TimePointerMap map[int16]*time.Time
	
func (m Int16TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int16ByteStringMap map[int16][]byte
	
func (m Int16ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int16ByteStringPointerMap map[int16]*[]byte
	
func (m Int16ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int16InterfaceMap map[int16]interface{}

func (m Int16InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int16StringMap map[int16]string
	
func (m Int16StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int16StringPointerMap map[int16]*string
	
func (m Int16StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int16PointerIntMap map[*int16]int
	
func (m Int16PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int16PointerIntPointerMap map[*int16]*int
	
func (m Int16PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int16PointerInt8Map map[*int16]int8
	
func (m Int16PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int16PointerInt8PointerMap map[*int16]*int8
	
func (m Int16PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int16PointerInt16Map map[*int16]int16
	
func (m Int16PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int16PointerInt16PointerMap map[*int16]*int16
	
func (m Int16PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int16PointerInt32Map map[*int16]int32
	
func (m Int16PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int16PointerInt32PointerMap map[*int16]*int32
	
func (m Int16PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int16PointerInt64Map map[*int16]int64
	
func (m Int16PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int16PointerInt64PointerMap map[*int16]*int64
	
func (m Int16PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int16PointerUintMap map[*int16]uint
	
func (m Int16PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int16PointerUintPointerMap map[*int16]*uint
	
func (m Int16PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int16PointerUint8Map map[*int16]uint8
	
func (m Int16PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int16PointerUint8PointerMap map[*int16]*uint8
	
func (m Int16PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int16PointerUint16Map map[*int16]uint16
	
func (m Int16PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int16PointerUint16PointerMap map[*int16]*uint16
	
func (m Int16PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int16PointerUint32Map map[*int16]uint32
	
func (m Int16PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int16PointerUint32PointerMap map[*int16]*uint32
	
func (m Int16PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int16PointerUint64Map map[*int16]uint64
	
func (m Int16PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int16PointerUint64PointerMap map[*int16]*uint64
	
func (m Int16PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int16PointerBoolMap map[*int16]bool
	
func (m Int16PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int16PointerBoolPointerMap map[*int16]*bool
	
func (m Int16PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int16PointerComplex64Map map[*int16]complex64
	
func (m Int16PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int16PointerComplex64PointerMap map[*int16]*complex64
	
func (m Int16PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int16PointerComplex128Map map[*int16]complex128
	
func (m Int16PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int16PointerComplex128PointerMap map[*int16]*complex128
	
func (m Int16PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int16PointerFloat32Map map[*int16]float32
	
func (m Int16PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int16PointerFloat32PointerMap map[*int16]*float32
	
func (m Int16PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int16PointerFloat64Map map[*int16]float64
	
func (m Int16PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int16PointerFloat64PointerMap map[*int16]*float64
	
func (m Int16PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int16PointerUintptrMap map[*int16]uintptr
	
func (m Int16PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int16PointerUintptrPointerMap map[*int16]*uintptr
	
func (m Int16PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int16PointerTimeMap map[*int16]time.Time
	
func (m Int16PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int16PointerTimePointerMap map[*int16]*time.Time
	
func (m Int16PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int16PointerByteStringMap map[*int16][]byte
	
func (m Int16PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int16PointerByteStringPointerMap map[*int16]*[]byte
	
func (m Int16PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int16PointerInterfaceMap map[*int16]interface{}

func (m Int16PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int16PointerStringMap map[*int16]string
	
func (m Int16PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int16PointerStringPointerMap map[*int16]*string
	
func (m Int16PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int32IntMap map[int32]int
	
func (m Int32IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int32IntPointerMap map[int32]*int
	
func (m Int32IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int32Int8Map map[int32]int8
	
func (m Int32Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int32Int8PointerMap map[int32]*int8
	
func (m Int32Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int32Int16Map map[int32]int16
	
func (m Int32Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int32Int16PointerMap map[int32]*int16
	
func (m Int32Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int32Int32Map map[int32]int32
	
func (m Int32Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int32Int32PointerMap map[int32]*int32
	
func (m Int32Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int32Int64Map map[int32]int64
	
func (m Int32Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int32Int64PointerMap map[int32]*int64
	
func (m Int32Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int32UintMap map[int32]uint
	
func (m Int32UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int32UintPointerMap map[int32]*uint
	
func (m Int32UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int32Uint8Map map[int32]uint8
	
func (m Int32Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int32Uint8PointerMap map[int32]*uint8
	
func (m Int32Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int32Uint16Map map[int32]uint16
	
func (m Int32Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int32Uint16PointerMap map[int32]*uint16
	
func (m Int32Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int32Uint32Map map[int32]uint32
	
func (m Int32Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int32Uint32PointerMap map[int32]*uint32
	
func (m Int32Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int32Uint64Map map[int32]uint64
	
func (m Int32Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int32Uint64PointerMap map[int32]*uint64
	
func (m Int32Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int32BoolMap map[int32]bool
	
func (m Int32BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int32BoolPointerMap map[int32]*bool
	
func (m Int32BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int32Complex64Map map[int32]complex64
	
func (m Int32Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int32Complex64PointerMap map[int32]*complex64
	
func (m Int32Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int32Complex128Map map[int32]complex128
	
func (m Int32Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int32Complex128PointerMap map[int32]*complex128
	
func (m Int32Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int32Float32Map map[int32]float32
	
func (m Int32Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int32Float32PointerMap map[int32]*float32
	
func (m Int32Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int32Float64Map map[int32]float64
	
func (m Int32Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int32Float64PointerMap map[int32]*float64
	
func (m Int32Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int32UintptrMap map[int32]uintptr
	
func (m Int32UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int32UintptrPointerMap map[int32]*uintptr
	
func (m Int32UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int32TimeMap map[int32]time.Time
	
func (m Int32TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int32TimePointerMap map[int32]*time.Time
	
func (m Int32TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int32ByteStringMap map[int32][]byte
	
func (m Int32ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int32ByteStringPointerMap map[int32]*[]byte
	
func (m Int32ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int32InterfaceMap map[int32]interface{}

func (m Int32InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int32StringMap map[int32]string
	
func (m Int32StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int32StringPointerMap map[int32]*string
	
func (m Int32StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int32PointerIntMap map[*int32]int
	
func (m Int32PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int32PointerIntPointerMap map[*int32]*int
	
func (m Int32PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int32PointerInt8Map map[*int32]int8
	
func (m Int32PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int32PointerInt8PointerMap map[*int32]*int8
	
func (m Int32PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int32PointerInt16Map map[*int32]int16
	
func (m Int32PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int32PointerInt16PointerMap map[*int32]*int16
	
func (m Int32PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int32PointerInt32Map map[*int32]int32
	
func (m Int32PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int32PointerInt32PointerMap map[*int32]*int32
	
func (m Int32PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int32PointerInt64Map map[*int32]int64
	
func (m Int32PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int32PointerInt64PointerMap map[*int32]*int64
	
func (m Int32PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int32PointerUintMap map[*int32]uint
	
func (m Int32PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int32PointerUintPointerMap map[*int32]*uint
	
func (m Int32PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int32PointerUint8Map map[*int32]uint8
	
func (m Int32PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int32PointerUint8PointerMap map[*int32]*uint8
	
func (m Int32PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int32PointerUint16Map map[*int32]uint16
	
func (m Int32PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int32PointerUint16PointerMap map[*int32]*uint16
	
func (m Int32PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int32PointerUint32Map map[*int32]uint32
	
func (m Int32PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int32PointerUint32PointerMap map[*int32]*uint32
	
func (m Int32PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int32PointerUint64Map map[*int32]uint64
	
func (m Int32PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int32PointerUint64PointerMap map[*int32]*uint64
	
func (m Int32PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int32PointerBoolMap map[*int32]bool
	
func (m Int32PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int32PointerBoolPointerMap map[*int32]*bool
	
func (m Int32PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int32PointerComplex64Map map[*int32]complex64
	
func (m Int32PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int32PointerComplex64PointerMap map[*int32]*complex64
	
func (m Int32PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int32PointerComplex128Map map[*int32]complex128
	
func (m Int32PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int32PointerComplex128PointerMap map[*int32]*complex128
	
func (m Int32PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int32PointerFloat32Map map[*int32]float32
	
func (m Int32PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int32PointerFloat32PointerMap map[*int32]*float32
	
func (m Int32PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int32PointerFloat64Map map[*int32]float64
	
func (m Int32PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int32PointerFloat64PointerMap map[*int32]*float64
	
func (m Int32PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int32PointerUintptrMap map[*int32]uintptr
	
func (m Int32PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int32PointerUintptrPointerMap map[*int32]*uintptr
	
func (m Int32PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int32PointerTimeMap map[*int32]time.Time
	
func (m Int32PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int32PointerTimePointerMap map[*int32]*time.Time
	
func (m Int32PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int32PointerByteStringMap map[*int32][]byte
	
func (m Int32PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int32PointerByteStringPointerMap map[*int32]*[]byte
	
func (m Int32PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int32PointerInterfaceMap map[*int32]interface{}

func (m Int32PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int32PointerStringMap map[*int32]string
	
func (m Int32PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int32PointerStringPointerMap map[*int32]*string
	
func (m Int32PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int64IntMap map[int64]int
	
func (m Int64IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int64IntPointerMap map[int64]*int
	
func (m Int64IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int64Int8Map map[int64]int8
	
func (m Int64Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int64Int8PointerMap map[int64]*int8
	
func (m Int64Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int64Int16Map map[int64]int16
	
func (m Int64Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int64Int16PointerMap map[int64]*int16
	
func (m Int64Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int64Int32Map map[int64]int32
	
func (m Int64Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int64Int32PointerMap map[int64]*int32
	
func (m Int64Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int64Int64Map map[int64]int64
	
func (m Int64Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int64Int64PointerMap map[int64]*int64
	
func (m Int64Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int64UintMap map[int64]uint
	
func (m Int64UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int64UintPointerMap map[int64]*uint
	
func (m Int64UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int64Uint8Map map[int64]uint8
	
func (m Int64Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int64Uint8PointerMap map[int64]*uint8
	
func (m Int64Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int64Uint16Map map[int64]uint16
	
func (m Int64Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int64Uint16PointerMap map[int64]*uint16
	
func (m Int64Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int64Uint32Map map[int64]uint32
	
func (m Int64Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int64Uint32PointerMap map[int64]*uint32
	
func (m Int64Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int64Uint64Map map[int64]uint64
	
func (m Int64Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int64Uint64PointerMap map[int64]*uint64
	
func (m Int64Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int64BoolMap map[int64]bool
	
func (m Int64BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int64BoolPointerMap map[int64]*bool
	
func (m Int64BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int64Complex64Map map[int64]complex64
	
func (m Int64Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int64Complex64PointerMap map[int64]*complex64
	
func (m Int64Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int64Complex128Map map[int64]complex128
	
func (m Int64Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int64Complex128PointerMap map[int64]*complex128
	
func (m Int64Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int64Float32Map map[int64]float32
	
func (m Int64Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int64Float32PointerMap map[int64]*float32
	
func (m Int64Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int64Float64Map map[int64]float64
	
func (m Int64Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int64Float64PointerMap map[int64]*float64
	
func (m Int64Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int64UintptrMap map[int64]uintptr
	
func (m Int64UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int64UintptrPointerMap map[int64]*uintptr
	
func (m Int64UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int64TimeMap map[int64]time.Time
	
func (m Int64TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int64TimePointerMap map[int64]*time.Time
	
func (m Int64TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int64ByteStringMap map[int64][]byte
	
func (m Int64ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int64ByteStringPointerMap map[int64]*[]byte
	
func (m Int64ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int64InterfaceMap map[int64]interface{}

func (m Int64InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int64StringMap map[int64]string
	
func (m Int64StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int64StringPointerMap map[int64]*string
	
func (m Int64StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Int64PointerIntMap map[*int64]int
	
func (m Int64PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Int64PointerIntPointerMap map[*int64]*int
	
func (m Int64PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Int64PointerInt8Map map[*int64]int8
	
func (m Int64PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Int64PointerInt8PointerMap map[*int64]*int8
	
func (m Int64PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Int64PointerInt16Map map[*int64]int16
	
func (m Int64PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Int64PointerInt16PointerMap map[*int64]*int16
	
func (m Int64PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Int64PointerInt32Map map[*int64]int32
	
func (m Int64PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Int64PointerInt32PointerMap map[*int64]*int32
	
func (m Int64PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Int64PointerInt64Map map[*int64]int64
	
func (m Int64PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Int64PointerInt64PointerMap map[*int64]*int64
	
func (m Int64PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Int64PointerUintMap map[*int64]uint
	
func (m Int64PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Int64PointerUintPointerMap map[*int64]*uint
	
func (m Int64PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Int64PointerUint8Map map[*int64]uint8
	
func (m Int64PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Int64PointerUint8PointerMap map[*int64]*uint8
	
func (m Int64PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Int64PointerUint16Map map[*int64]uint16
	
func (m Int64PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Int64PointerUint16PointerMap map[*int64]*uint16
	
func (m Int64PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Int64PointerUint32Map map[*int64]uint32
	
func (m Int64PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Int64PointerUint32PointerMap map[*int64]*uint32
	
func (m Int64PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Int64PointerUint64Map map[*int64]uint64
	
func (m Int64PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Int64PointerUint64PointerMap map[*int64]*uint64
	
func (m Int64PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Int64PointerBoolMap map[*int64]bool
	
func (m Int64PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Int64PointerBoolPointerMap map[*int64]*bool
	
func (m Int64PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Int64PointerComplex64Map map[*int64]complex64
	
func (m Int64PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Int64PointerComplex64PointerMap map[*int64]*complex64
	
func (m Int64PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Int64PointerComplex128Map map[*int64]complex128
	
func (m Int64PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Int64PointerComplex128PointerMap map[*int64]*complex128
	
func (m Int64PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Int64PointerFloat32Map map[*int64]float32
	
func (m Int64PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Int64PointerFloat32PointerMap map[*int64]*float32
	
func (m Int64PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Int64PointerFloat64Map map[*int64]float64
	
func (m Int64PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Int64PointerFloat64PointerMap map[*int64]*float64
	
func (m Int64PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Int64PointerUintptrMap map[*int64]uintptr
	
func (m Int64PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Int64PointerUintptrPointerMap map[*int64]*uintptr
	
func (m Int64PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Int64PointerTimeMap map[*int64]time.Time
	
func (m Int64PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Int64PointerTimePointerMap map[*int64]*time.Time
	
func (m Int64PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Int64PointerByteStringMap map[*int64][]byte
	
func (m Int64PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Int64PointerByteStringPointerMap map[*int64]*[]byte
	
func (m Int64PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Int64PointerInterfaceMap map[*int64]interface{}

func (m Int64PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Int64PointerStringMap map[*int64]string
	
func (m Int64PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Int64PointerStringPointerMap map[*int64]*string
	
func (m Int64PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type UintIntMap map[uint]int
	
func (m UintIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type UintIntPointerMap map[uint]*int
	
func (m UintIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type UintInt8Map map[uint]int8
	
func (m UintInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type UintInt8PointerMap map[uint]*int8
	
func (m UintInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type UintInt16Map map[uint]int16
	
func (m UintInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type UintInt16PointerMap map[uint]*int16
	
func (m UintInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type UintInt32Map map[uint]int32
	
func (m UintInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type UintInt32PointerMap map[uint]*int32
	
func (m UintInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type UintInt64Map map[uint]int64
	
func (m UintInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type UintInt64PointerMap map[uint]*int64
	
func (m UintInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type UintUintMap map[uint]uint
	
func (m UintUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type UintUintPointerMap map[uint]*uint
	
func (m UintUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type UintUint8Map map[uint]uint8
	
func (m UintUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type UintUint8PointerMap map[uint]*uint8
	
func (m UintUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type UintUint16Map map[uint]uint16
	
func (m UintUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type UintUint16PointerMap map[uint]*uint16
	
func (m UintUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type UintUint32Map map[uint]uint32
	
func (m UintUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type UintUint32PointerMap map[uint]*uint32
	
func (m UintUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type UintUint64Map map[uint]uint64
	
func (m UintUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type UintUint64PointerMap map[uint]*uint64
	
func (m UintUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type UintBoolMap map[uint]bool
	
func (m UintBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type UintBoolPointerMap map[uint]*bool
	
func (m UintBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type UintComplex64Map map[uint]complex64
	
func (m UintComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type UintComplex64PointerMap map[uint]*complex64
	
func (m UintComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type UintComplex128Map map[uint]complex128
	
func (m UintComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type UintComplex128PointerMap map[uint]*complex128
	
func (m UintComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type UintFloat32Map map[uint]float32
	
func (m UintFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type UintFloat32PointerMap map[uint]*float32
	
func (m UintFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type UintFloat64Map map[uint]float64
	
func (m UintFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type UintFloat64PointerMap map[uint]*float64
	
func (m UintFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type UintUintptrMap map[uint]uintptr
	
func (m UintUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type UintUintptrPointerMap map[uint]*uintptr
	
func (m UintUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type UintTimeMap map[uint]time.Time
	
func (m UintTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type UintTimePointerMap map[uint]*time.Time
	
func (m UintTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type UintByteStringMap map[uint][]byte
	
func (m UintByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type UintByteStringPointerMap map[uint]*[]byte
	
func (m UintByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type UintInterfaceMap map[uint]interface{}

func (m UintInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type UintStringMap map[uint]string
	
func (m UintStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type UintStringPointerMap map[uint]*string
	
func (m UintStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type UintPointerIntMap map[*uint]int
	
func (m UintPointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type UintPointerIntPointerMap map[*uint]*int
	
func (m UintPointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type UintPointerInt8Map map[*uint]int8
	
func (m UintPointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type UintPointerInt8PointerMap map[*uint]*int8
	
func (m UintPointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type UintPointerInt16Map map[*uint]int16
	
func (m UintPointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type UintPointerInt16PointerMap map[*uint]*int16
	
func (m UintPointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type UintPointerInt32Map map[*uint]int32
	
func (m UintPointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type UintPointerInt32PointerMap map[*uint]*int32
	
func (m UintPointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type UintPointerInt64Map map[*uint]int64
	
func (m UintPointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type UintPointerInt64PointerMap map[*uint]*int64
	
func (m UintPointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type UintPointerUintMap map[*uint]uint
	
func (m UintPointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type UintPointerUintPointerMap map[*uint]*uint
	
func (m UintPointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type UintPointerUint8Map map[*uint]uint8
	
func (m UintPointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type UintPointerUint8PointerMap map[*uint]*uint8
	
func (m UintPointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type UintPointerUint16Map map[*uint]uint16
	
func (m UintPointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type UintPointerUint16PointerMap map[*uint]*uint16
	
func (m UintPointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type UintPointerUint32Map map[*uint]uint32
	
func (m UintPointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type UintPointerUint32PointerMap map[*uint]*uint32
	
func (m UintPointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type UintPointerUint64Map map[*uint]uint64
	
func (m UintPointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type UintPointerUint64PointerMap map[*uint]*uint64
	
func (m UintPointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type UintPointerBoolMap map[*uint]bool
	
func (m UintPointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type UintPointerBoolPointerMap map[*uint]*bool
	
func (m UintPointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type UintPointerComplex64Map map[*uint]complex64
	
func (m UintPointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type UintPointerComplex64PointerMap map[*uint]*complex64
	
func (m UintPointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type UintPointerComplex128Map map[*uint]complex128
	
func (m UintPointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type UintPointerComplex128PointerMap map[*uint]*complex128
	
func (m UintPointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type UintPointerFloat32Map map[*uint]float32
	
func (m UintPointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type UintPointerFloat32PointerMap map[*uint]*float32
	
func (m UintPointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type UintPointerFloat64Map map[*uint]float64
	
func (m UintPointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type UintPointerFloat64PointerMap map[*uint]*float64
	
func (m UintPointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type UintPointerUintptrMap map[*uint]uintptr
	
func (m UintPointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type UintPointerUintptrPointerMap map[*uint]*uintptr
	
func (m UintPointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type UintPointerTimeMap map[*uint]time.Time
	
func (m UintPointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type UintPointerTimePointerMap map[*uint]*time.Time
	
func (m UintPointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type UintPointerByteStringMap map[*uint][]byte
	
func (m UintPointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type UintPointerByteStringPointerMap map[*uint]*[]byte
	
func (m UintPointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type UintPointerInterfaceMap map[*uint]interface{}

func (m UintPointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type UintPointerStringMap map[*uint]string
	
func (m UintPointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type UintPointerStringPointerMap map[*uint]*string
	
func (m UintPointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint8IntMap map[uint8]int
	
func (m Uint8IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint8IntPointerMap map[uint8]*int
	
func (m Uint8IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint8Int8Map map[uint8]int8
	
func (m Uint8Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint8Int8PointerMap map[uint8]*int8
	
func (m Uint8Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint8Int16Map map[uint8]int16
	
func (m Uint8Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint8Int16PointerMap map[uint8]*int16
	
func (m Uint8Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint8Int32Map map[uint8]int32
	
func (m Uint8Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint8Int32PointerMap map[uint8]*int32
	
func (m Uint8Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint8Int64Map map[uint8]int64
	
func (m Uint8Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint8Int64PointerMap map[uint8]*int64
	
func (m Uint8Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint8UintMap map[uint8]uint
	
func (m Uint8UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint8UintPointerMap map[uint8]*uint
	
func (m Uint8UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint8Uint8Map map[uint8]uint8
	
func (m Uint8Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint8Uint8PointerMap map[uint8]*uint8
	
func (m Uint8Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint8Uint16Map map[uint8]uint16
	
func (m Uint8Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint8Uint16PointerMap map[uint8]*uint16
	
func (m Uint8Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint8Uint32Map map[uint8]uint32
	
func (m Uint8Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint8Uint32PointerMap map[uint8]*uint32
	
func (m Uint8Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint8Uint64Map map[uint8]uint64
	
func (m Uint8Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint8Uint64PointerMap map[uint8]*uint64
	
func (m Uint8Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint8BoolMap map[uint8]bool
	
func (m Uint8BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint8BoolPointerMap map[uint8]*bool
	
func (m Uint8BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint8Complex64Map map[uint8]complex64
	
func (m Uint8Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint8Complex64PointerMap map[uint8]*complex64
	
func (m Uint8Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint8Complex128Map map[uint8]complex128
	
func (m Uint8Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint8Complex128PointerMap map[uint8]*complex128
	
func (m Uint8Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint8Float32Map map[uint8]float32
	
func (m Uint8Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint8Float32PointerMap map[uint8]*float32
	
func (m Uint8Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint8Float64Map map[uint8]float64
	
func (m Uint8Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint8Float64PointerMap map[uint8]*float64
	
func (m Uint8Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint8UintptrMap map[uint8]uintptr
	
func (m Uint8UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint8UintptrPointerMap map[uint8]*uintptr
	
func (m Uint8UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint8TimeMap map[uint8]time.Time
	
func (m Uint8TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint8TimePointerMap map[uint8]*time.Time
	
func (m Uint8TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint8ByteStringMap map[uint8][]byte
	
func (m Uint8ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint8ByteStringPointerMap map[uint8]*[]byte
	
func (m Uint8ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint8InterfaceMap map[uint8]interface{}

func (m Uint8InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint8StringMap map[uint8]string
	
func (m Uint8StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint8StringPointerMap map[uint8]*string
	
func (m Uint8StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint8PointerIntMap map[*uint8]int
	
func (m Uint8PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint8PointerIntPointerMap map[*uint8]*int
	
func (m Uint8PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint8PointerInt8Map map[*uint8]int8
	
func (m Uint8PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint8PointerInt8PointerMap map[*uint8]*int8
	
func (m Uint8PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint8PointerInt16Map map[*uint8]int16
	
func (m Uint8PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint8PointerInt16PointerMap map[*uint8]*int16
	
func (m Uint8PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint8PointerInt32Map map[*uint8]int32
	
func (m Uint8PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint8PointerInt32PointerMap map[*uint8]*int32
	
func (m Uint8PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint8PointerInt64Map map[*uint8]int64
	
func (m Uint8PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint8PointerInt64PointerMap map[*uint8]*int64
	
func (m Uint8PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint8PointerUintMap map[*uint8]uint
	
func (m Uint8PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint8PointerUintPointerMap map[*uint8]*uint
	
func (m Uint8PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint8PointerUint8Map map[*uint8]uint8
	
func (m Uint8PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint8PointerUint8PointerMap map[*uint8]*uint8
	
func (m Uint8PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint8PointerUint16Map map[*uint8]uint16
	
func (m Uint8PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint8PointerUint16PointerMap map[*uint8]*uint16
	
func (m Uint8PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint8PointerUint32Map map[*uint8]uint32
	
func (m Uint8PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint8PointerUint32PointerMap map[*uint8]*uint32
	
func (m Uint8PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint8PointerUint64Map map[*uint8]uint64
	
func (m Uint8PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint8PointerUint64PointerMap map[*uint8]*uint64
	
func (m Uint8PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint8PointerBoolMap map[*uint8]bool
	
func (m Uint8PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint8PointerBoolPointerMap map[*uint8]*bool
	
func (m Uint8PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint8PointerComplex64Map map[*uint8]complex64
	
func (m Uint8PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint8PointerComplex64PointerMap map[*uint8]*complex64
	
func (m Uint8PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint8PointerComplex128Map map[*uint8]complex128
	
func (m Uint8PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint8PointerComplex128PointerMap map[*uint8]*complex128
	
func (m Uint8PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint8PointerFloat32Map map[*uint8]float32
	
func (m Uint8PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint8PointerFloat32PointerMap map[*uint8]*float32
	
func (m Uint8PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint8PointerFloat64Map map[*uint8]float64
	
func (m Uint8PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint8PointerFloat64PointerMap map[*uint8]*float64
	
func (m Uint8PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint8PointerUintptrMap map[*uint8]uintptr
	
func (m Uint8PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint8PointerUintptrPointerMap map[*uint8]*uintptr
	
func (m Uint8PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint8PointerTimeMap map[*uint8]time.Time
	
func (m Uint8PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint8PointerTimePointerMap map[*uint8]*time.Time
	
func (m Uint8PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint8PointerByteStringMap map[*uint8][]byte
	
func (m Uint8PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint8PointerByteStringPointerMap map[*uint8]*[]byte
	
func (m Uint8PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint8PointerInterfaceMap map[*uint8]interface{}

func (m Uint8PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint8PointerStringMap map[*uint8]string
	
func (m Uint8PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint8PointerStringPointerMap map[*uint8]*string
	
func (m Uint8PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint16IntMap map[uint16]int
	
func (m Uint16IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint16IntPointerMap map[uint16]*int
	
func (m Uint16IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint16Int8Map map[uint16]int8
	
func (m Uint16Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint16Int8PointerMap map[uint16]*int8
	
func (m Uint16Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint16Int16Map map[uint16]int16
	
func (m Uint16Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint16Int16PointerMap map[uint16]*int16
	
func (m Uint16Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint16Int32Map map[uint16]int32
	
func (m Uint16Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint16Int32PointerMap map[uint16]*int32
	
func (m Uint16Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint16Int64Map map[uint16]int64
	
func (m Uint16Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint16Int64PointerMap map[uint16]*int64
	
func (m Uint16Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint16UintMap map[uint16]uint
	
func (m Uint16UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint16UintPointerMap map[uint16]*uint
	
func (m Uint16UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint16Uint8Map map[uint16]uint8
	
func (m Uint16Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint16Uint8PointerMap map[uint16]*uint8
	
func (m Uint16Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint16Uint16Map map[uint16]uint16
	
func (m Uint16Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint16Uint16PointerMap map[uint16]*uint16
	
func (m Uint16Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint16Uint32Map map[uint16]uint32
	
func (m Uint16Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint16Uint32PointerMap map[uint16]*uint32
	
func (m Uint16Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint16Uint64Map map[uint16]uint64
	
func (m Uint16Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint16Uint64PointerMap map[uint16]*uint64
	
func (m Uint16Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint16BoolMap map[uint16]bool
	
func (m Uint16BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint16BoolPointerMap map[uint16]*bool
	
func (m Uint16BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint16Complex64Map map[uint16]complex64
	
func (m Uint16Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint16Complex64PointerMap map[uint16]*complex64
	
func (m Uint16Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint16Complex128Map map[uint16]complex128
	
func (m Uint16Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint16Complex128PointerMap map[uint16]*complex128
	
func (m Uint16Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint16Float32Map map[uint16]float32
	
func (m Uint16Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint16Float32PointerMap map[uint16]*float32
	
func (m Uint16Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint16Float64Map map[uint16]float64
	
func (m Uint16Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint16Float64PointerMap map[uint16]*float64
	
func (m Uint16Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint16UintptrMap map[uint16]uintptr
	
func (m Uint16UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint16UintptrPointerMap map[uint16]*uintptr
	
func (m Uint16UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint16TimeMap map[uint16]time.Time
	
func (m Uint16TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint16TimePointerMap map[uint16]*time.Time
	
func (m Uint16TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint16ByteStringMap map[uint16][]byte
	
func (m Uint16ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint16ByteStringPointerMap map[uint16]*[]byte
	
func (m Uint16ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint16InterfaceMap map[uint16]interface{}

func (m Uint16InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint16StringMap map[uint16]string
	
func (m Uint16StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint16StringPointerMap map[uint16]*string
	
func (m Uint16StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint16PointerIntMap map[*uint16]int
	
func (m Uint16PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint16PointerIntPointerMap map[*uint16]*int
	
func (m Uint16PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint16PointerInt8Map map[*uint16]int8
	
func (m Uint16PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint16PointerInt8PointerMap map[*uint16]*int8
	
func (m Uint16PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint16PointerInt16Map map[*uint16]int16
	
func (m Uint16PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint16PointerInt16PointerMap map[*uint16]*int16
	
func (m Uint16PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint16PointerInt32Map map[*uint16]int32
	
func (m Uint16PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint16PointerInt32PointerMap map[*uint16]*int32
	
func (m Uint16PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint16PointerInt64Map map[*uint16]int64
	
func (m Uint16PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint16PointerInt64PointerMap map[*uint16]*int64
	
func (m Uint16PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint16PointerUintMap map[*uint16]uint
	
func (m Uint16PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint16PointerUintPointerMap map[*uint16]*uint
	
func (m Uint16PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint16PointerUint8Map map[*uint16]uint8
	
func (m Uint16PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint16PointerUint8PointerMap map[*uint16]*uint8
	
func (m Uint16PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint16PointerUint16Map map[*uint16]uint16
	
func (m Uint16PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint16PointerUint16PointerMap map[*uint16]*uint16
	
func (m Uint16PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint16PointerUint32Map map[*uint16]uint32
	
func (m Uint16PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint16PointerUint32PointerMap map[*uint16]*uint32
	
func (m Uint16PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint16PointerUint64Map map[*uint16]uint64
	
func (m Uint16PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint16PointerUint64PointerMap map[*uint16]*uint64
	
func (m Uint16PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint16PointerBoolMap map[*uint16]bool
	
func (m Uint16PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint16PointerBoolPointerMap map[*uint16]*bool
	
func (m Uint16PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint16PointerComplex64Map map[*uint16]complex64
	
func (m Uint16PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint16PointerComplex64PointerMap map[*uint16]*complex64
	
func (m Uint16PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint16PointerComplex128Map map[*uint16]complex128
	
func (m Uint16PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint16PointerComplex128PointerMap map[*uint16]*complex128
	
func (m Uint16PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint16PointerFloat32Map map[*uint16]float32
	
func (m Uint16PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint16PointerFloat32PointerMap map[*uint16]*float32
	
func (m Uint16PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint16PointerFloat64Map map[*uint16]float64
	
func (m Uint16PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint16PointerFloat64PointerMap map[*uint16]*float64
	
func (m Uint16PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint16PointerUintptrMap map[*uint16]uintptr
	
func (m Uint16PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint16PointerUintptrPointerMap map[*uint16]*uintptr
	
func (m Uint16PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint16PointerTimeMap map[*uint16]time.Time
	
func (m Uint16PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint16PointerTimePointerMap map[*uint16]*time.Time
	
func (m Uint16PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint16PointerByteStringMap map[*uint16][]byte
	
func (m Uint16PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint16PointerByteStringPointerMap map[*uint16]*[]byte
	
func (m Uint16PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint16PointerInterfaceMap map[*uint16]interface{}

func (m Uint16PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint16PointerStringMap map[*uint16]string
	
func (m Uint16PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint16PointerStringPointerMap map[*uint16]*string
	
func (m Uint16PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint32IntMap map[uint32]int
	
func (m Uint32IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint32IntPointerMap map[uint32]*int
	
func (m Uint32IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint32Int8Map map[uint32]int8
	
func (m Uint32Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint32Int8PointerMap map[uint32]*int8
	
func (m Uint32Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint32Int16Map map[uint32]int16
	
func (m Uint32Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint32Int16PointerMap map[uint32]*int16
	
func (m Uint32Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint32Int32Map map[uint32]int32
	
func (m Uint32Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint32Int32PointerMap map[uint32]*int32
	
func (m Uint32Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint32Int64Map map[uint32]int64
	
func (m Uint32Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint32Int64PointerMap map[uint32]*int64
	
func (m Uint32Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint32UintMap map[uint32]uint
	
func (m Uint32UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint32UintPointerMap map[uint32]*uint
	
func (m Uint32UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint32Uint8Map map[uint32]uint8
	
func (m Uint32Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint32Uint8PointerMap map[uint32]*uint8
	
func (m Uint32Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint32Uint16Map map[uint32]uint16
	
func (m Uint32Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint32Uint16PointerMap map[uint32]*uint16
	
func (m Uint32Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint32Uint32Map map[uint32]uint32
	
func (m Uint32Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint32Uint32PointerMap map[uint32]*uint32
	
func (m Uint32Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint32Uint64Map map[uint32]uint64
	
func (m Uint32Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint32Uint64PointerMap map[uint32]*uint64
	
func (m Uint32Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint32BoolMap map[uint32]bool
	
func (m Uint32BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint32BoolPointerMap map[uint32]*bool
	
func (m Uint32BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint32Complex64Map map[uint32]complex64
	
func (m Uint32Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint32Complex64PointerMap map[uint32]*complex64
	
func (m Uint32Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint32Complex128Map map[uint32]complex128
	
func (m Uint32Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint32Complex128PointerMap map[uint32]*complex128
	
func (m Uint32Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint32Float32Map map[uint32]float32
	
func (m Uint32Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint32Float32PointerMap map[uint32]*float32
	
func (m Uint32Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint32Float64Map map[uint32]float64
	
func (m Uint32Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint32Float64PointerMap map[uint32]*float64
	
func (m Uint32Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint32UintptrMap map[uint32]uintptr
	
func (m Uint32UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint32UintptrPointerMap map[uint32]*uintptr
	
func (m Uint32UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint32TimeMap map[uint32]time.Time
	
func (m Uint32TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint32TimePointerMap map[uint32]*time.Time
	
func (m Uint32TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint32ByteStringMap map[uint32][]byte
	
func (m Uint32ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint32ByteStringPointerMap map[uint32]*[]byte
	
func (m Uint32ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint32InterfaceMap map[uint32]interface{}

func (m Uint32InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint32StringMap map[uint32]string
	
func (m Uint32StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint32StringPointerMap map[uint32]*string
	
func (m Uint32StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint32PointerIntMap map[*uint32]int
	
func (m Uint32PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint32PointerIntPointerMap map[*uint32]*int
	
func (m Uint32PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint32PointerInt8Map map[*uint32]int8
	
func (m Uint32PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint32PointerInt8PointerMap map[*uint32]*int8
	
func (m Uint32PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint32PointerInt16Map map[*uint32]int16
	
func (m Uint32PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint32PointerInt16PointerMap map[*uint32]*int16
	
func (m Uint32PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint32PointerInt32Map map[*uint32]int32
	
func (m Uint32PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint32PointerInt32PointerMap map[*uint32]*int32
	
func (m Uint32PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint32PointerInt64Map map[*uint32]int64
	
func (m Uint32PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint32PointerInt64PointerMap map[*uint32]*int64
	
func (m Uint32PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint32PointerUintMap map[*uint32]uint
	
func (m Uint32PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint32PointerUintPointerMap map[*uint32]*uint
	
func (m Uint32PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint32PointerUint8Map map[*uint32]uint8
	
func (m Uint32PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint32PointerUint8PointerMap map[*uint32]*uint8
	
func (m Uint32PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint32PointerUint16Map map[*uint32]uint16
	
func (m Uint32PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint32PointerUint16PointerMap map[*uint32]*uint16
	
func (m Uint32PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint32PointerUint32Map map[*uint32]uint32
	
func (m Uint32PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint32PointerUint32PointerMap map[*uint32]*uint32
	
func (m Uint32PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint32PointerUint64Map map[*uint32]uint64
	
func (m Uint32PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint32PointerUint64PointerMap map[*uint32]*uint64
	
func (m Uint32PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint32PointerBoolMap map[*uint32]bool
	
func (m Uint32PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint32PointerBoolPointerMap map[*uint32]*bool
	
func (m Uint32PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint32PointerComplex64Map map[*uint32]complex64
	
func (m Uint32PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint32PointerComplex64PointerMap map[*uint32]*complex64
	
func (m Uint32PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint32PointerComplex128Map map[*uint32]complex128
	
func (m Uint32PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint32PointerComplex128PointerMap map[*uint32]*complex128
	
func (m Uint32PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint32PointerFloat32Map map[*uint32]float32
	
func (m Uint32PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint32PointerFloat32PointerMap map[*uint32]*float32
	
func (m Uint32PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint32PointerFloat64Map map[*uint32]float64
	
func (m Uint32PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint32PointerFloat64PointerMap map[*uint32]*float64
	
func (m Uint32PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint32PointerUintptrMap map[*uint32]uintptr
	
func (m Uint32PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint32PointerUintptrPointerMap map[*uint32]*uintptr
	
func (m Uint32PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint32PointerTimeMap map[*uint32]time.Time
	
func (m Uint32PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint32PointerTimePointerMap map[*uint32]*time.Time
	
func (m Uint32PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint32PointerByteStringMap map[*uint32][]byte
	
func (m Uint32PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint32PointerByteStringPointerMap map[*uint32]*[]byte
	
func (m Uint32PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint32PointerInterfaceMap map[*uint32]interface{}

func (m Uint32PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint32PointerStringMap map[*uint32]string
	
func (m Uint32PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint32PointerStringPointerMap map[*uint32]*string
	
func (m Uint32PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint64IntMap map[uint64]int
	
func (m Uint64IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint64IntPointerMap map[uint64]*int
	
func (m Uint64IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint64Int8Map map[uint64]int8
	
func (m Uint64Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint64Int8PointerMap map[uint64]*int8
	
func (m Uint64Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint64Int16Map map[uint64]int16
	
func (m Uint64Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint64Int16PointerMap map[uint64]*int16
	
func (m Uint64Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint64Int32Map map[uint64]int32
	
func (m Uint64Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint64Int32PointerMap map[uint64]*int32
	
func (m Uint64Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint64Int64Map map[uint64]int64
	
func (m Uint64Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint64Int64PointerMap map[uint64]*int64
	
func (m Uint64Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint64UintMap map[uint64]uint
	
func (m Uint64UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint64UintPointerMap map[uint64]*uint
	
func (m Uint64UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint64Uint8Map map[uint64]uint8
	
func (m Uint64Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint64Uint8PointerMap map[uint64]*uint8
	
func (m Uint64Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint64Uint16Map map[uint64]uint16
	
func (m Uint64Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint64Uint16PointerMap map[uint64]*uint16
	
func (m Uint64Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint64Uint32Map map[uint64]uint32
	
func (m Uint64Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint64Uint32PointerMap map[uint64]*uint32
	
func (m Uint64Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint64Uint64Map map[uint64]uint64
	
func (m Uint64Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint64Uint64PointerMap map[uint64]*uint64
	
func (m Uint64Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint64BoolMap map[uint64]bool
	
func (m Uint64BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint64BoolPointerMap map[uint64]*bool
	
func (m Uint64BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint64Complex64Map map[uint64]complex64
	
func (m Uint64Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint64Complex64PointerMap map[uint64]*complex64
	
func (m Uint64Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint64Complex128Map map[uint64]complex128
	
func (m Uint64Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint64Complex128PointerMap map[uint64]*complex128
	
func (m Uint64Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint64Float32Map map[uint64]float32
	
func (m Uint64Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint64Float32PointerMap map[uint64]*float32
	
func (m Uint64Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint64Float64Map map[uint64]float64
	
func (m Uint64Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint64Float64PointerMap map[uint64]*float64
	
func (m Uint64Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint64UintptrMap map[uint64]uintptr
	
func (m Uint64UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint64UintptrPointerMap map[uint64]*uintptr
	
func (m Uint64UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint64TimeMap map[uint64]time.Time
	
func (m Uint64TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint64TimePointerMap map[uint64]*time.Time
	
func (m Uint64TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint64ByteStringMap map[uint64][]byte
	
func (m Uint64ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint64ByteStringPointerMap map[uint64]*[]byte
	
func (m Uint64ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint64InterfaceMap map[uint64]interface{}

func (m Uint64InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint64StringMap map[uint64]string
	
func (m Uint64StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint64StringPointerMap map[uint64]*string
	
func (m Uint64StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Uint64PointerIntMap map[*uint64]int
	
func (m Uint64PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Uint64PointerIntPointerMap map[*uint64]*int
	
func (m Uint64PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Uint64PointerInt8Map map[*uint64]int8
	
func (m Uint64PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Uint64PointerInt8PointerMap map[*uint64]*int8
	
func (m Uint64PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Uint64PointerInt16Map map[*uint64]int16
	
func (m Uint64PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Uint64PointerInt16PointerMap map[*uint64]*int16
	
func (m Uint64PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Uint64PointerInt32Map map[*uint64]int32
	
func (m Uint64PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Uint64PointerInt32PointerMap map[*uint64]*int32
	
func (m Uint64PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Uint64PointerInt64Map map[*uint64]int64
	
func (m Uint64PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Uint64PointerInt64PointerMap map[*uint64]*int64
	
func (m Uint64PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Uint64PointerUintMap map[*uint64]uint
	
func (m Uint64PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Uint64PointerUintPointerMap map[*uint64]*uint
	
func (m Uint64PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Uint64PointerUint8Map map[*uint64]uint8
	
func (m Uint64PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Uint64PointerUint8PointerMap map[*uint64]*uint8
	
func (m Uint64PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Uint64PointerUint16Map map[*uint64]uint16
	
func (m Uint64PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Uint64PointerUint16PointerMap map[*uint64]*uint16
	
func (m Uint64PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Uint64PointerUint32Map map[*uint64]uint32
	
func (m Uint64PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Uint64PointerUint32PointerMap map[*uint64]*uint32
	
func (m Uint64PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Uint64PointerUint64Map map[*uint64]uint64
	
func (m Uint64PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Uint64PointerUint64PointerMap map[*uint64]*uint64
	
func (m Uint64PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Uint64PointerBoolMap map[*uint64]bool
	
func (m Uint64PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Uint64PointerBoolPointerMap map[*uint64]*bool
	
func (m Uint64PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Uint64PointerComplex64Map map[*uint64]complex64
	
func (m Uint64PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Uint64PointerComplex64PointerMap map[*uint64]*complex64
	
func (m Uint64PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Uint64PointerComplex128Map map[*uint64]complex128
	
func (m Uint64PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Uint64PointerComplex128PointerMap map[*uint64]*complex128
	
func (m Uint64PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Uint64PointerFloat32Map map[*uint64]float32
	
func (m Uint64PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Uint64PointerFloat32PointerMap map[*uint64]*float32
	
func (m Uint64PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Uint64PointerFloat64Map map[*uint64]float64
	
func (m Uint64PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Uint64PointerFloat64PointerMap map[*uint64]*float64
	
func (m Uint64PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Uint64PointerUintptrMap map[*uint64]uintptr
	
func (m Uint64PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Uint64PointerUintptrPointerMap map[*uint64]*uintptr
	
func (m Uint64PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Uint64PointerTimeMap map[*uint64]time.Time
	
func (m Uint64PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Uint64PointerTimePointerMap map[*uint64]*time.Time
	
func (m Uint64PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Uint64PointerByteStringMap map[*uint64][]byte
	
func (m Uint64PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Uint64PointerByteStringPointerMap map[*uint64]*[]byte
	
func (m Uint64PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Uint64PointerInterfaceMap map[*uint64]interface{}

func (m Uint64PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Uint64PointerStringMap map[*uint64]string
	
func (m Uint64PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Uint64PointerStringPointerMap map[*uint64]*string
	
func (m Uint64PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type BoolIntMap map[bool]int
	
func (m BoolIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type BoolIntPointerMap map[bool]*int
	
func (m BoolIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type BoolInt8Map map[bool]int8
	
func (m BoolInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type BoolInt8PointerMap map[bool]*int8
	
func (m BoolInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type BoolInt16Map map[bool]int16
	
func (m BoolInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type BoolInt16PointerMap map[bool]*int16
	
func (m BoolInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type BoolInt32Map map[bool]int32
	
func (m BoolInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type BoolInt32PointerMap map[bool]*int32
	
func (m BoolInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type BoolInt64Map map[bool]int64
	
func (m BoolInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type BoolInt64PointerMap map[bool]*int64
	
func (m BoolInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type BoolUintMap map[bool]uint
	
func (m BoolUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type BoolUintPointerMap map[bool]*uint
	
func (m BoolUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type BoolUint8Map map[bool]uint8
	
func (m BoolUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type BoolUint8PointerMap map[bool]*uint8
	
func (m BoolUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type BoolUint16Map map[bool]uint16
	
func (m BoolUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type BoolUint16PointerMap map[bool]*uint16
	
func (m BoolUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type BoolUint32Map map[bool]uint32
	
func (m BoolUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type BoolUint32PointerMap map[bool]*uint32
	
func (m BoolUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type BoolUint64Map map[bool]uint64
	
func (m BoolUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type BoolUint64PointerMap map[bool]*uint64
	
func (m BoolUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type BoolBoolMap map[bool]bool
	
func (m BoolBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type BoolBoolPointerMap map[bool]*bool
	
func (m BoolBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type BoolComplex64Map map[bool]complex64
	
func (m BoolComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type BoolComplex64PointerMap map[bool]*complex64
	
func (m BoolComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type BoolComplex128Map map[bool]complex128
	
func (m BoolComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type BoolComplex128PointerMap map[bool]*complex128
	
func (m BoolComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type BoolFloat32Map map[bool]float32
	
func (m BoolFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type BoolFloat32PointerMap map[bool]*float32
	
func (m BoolFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type BoolFloat64Map map[bool]float64
	
func (m BoolFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type BoolFloat64PointerMap map[bool]*float64
	
func (m BoolFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type BoolUintptrMap map[bool]uintptr
	
func (m BoolUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type BoolUintptrPointerMap map[bool]*uintptr
	
func (m BoolUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type BoolTimeMap map[bool]time.Time
	
func (m BoolTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type BoolTimePointerMap map[bool]*time.Time
	
func (m BoolTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type BoolByteStringMap map[bool][]byte
	
func (m BoolByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type BoolByteStringPointerMap map[bool]*[]byte
	
func (m BoolByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type BoolInterfaceMap map[bool]interface{}

func (m BoolInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type BoolStringMap map[bool]string
	
func (m BoolStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type BoolStringPointerMap map[bool]*string
	
func (m BoolStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type BoolPointerIntMap map[*bool]int
	
func (m BoolPointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type BoolPointerIntPointerMap map[*bool]*int
	
func (m BoolPointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type BoolPointerInt8Map map[*bool]int8
	
func (m BoolPointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type BoolPointerInt8PointerMap map[*bool]*int8
	
func (m BoolPointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type BoolPointerInt16Map map[*bool]int16
	
func (m BoolPointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type BoolPointerInt16PointerMap map[*bool]*int16
	
func (m BoolPointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type BoolPointerInt32Map map[*bool]int32
	
func (m BoolPointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type BoolPointerInt32PointerMap map[*bool]*int32
	
func (m BoolPointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type BoolPointerInt64Map map[*bool]int64
	
func (m BoolPointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type BoolPointerInt64PointerMap map[*bool]*int64
	
func (m BoolPointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type BoolPointerUintMap map[*bool]uint
	
func (m BoolPointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type BoolPointerUintPointerMap map[*bool]*uint
	
func (m BoolPointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type BoolPointerUint8Map map[*bool]uint8
	
func (m BoolPointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type BoolPointerUint8PointerMap map[*bool]*uint8
	
func (m BoolPointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type BoolPointerUint16Map map[*bool]uint16
	
func (m BoolPointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type BoolPointerUint16PointerMap map[*bool]*uint16
	
func (m BoolPointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type BoolPointerUint32Map map[*bool]uint32
	
func (m BoolPointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type BoolPointerUint32PointerMap map[*bool]*uint32
	
func (m BoolPointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type BoolPointerUint64Map map[*bool]uint64
	
func (m BoolPointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type BoolPointerUint64PointerMap map[*bool]*uint64
	
func (m BoolPointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type BoolPointerBoolMap map[*bool]bool
	
func (m BoolPointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type BoolPointerBoolPointerMap map[*bool]*bool
	
func (m BoolPointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type BoolPointerComplex64Map map[*bool]complex64
	
func (m BoolPointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type BoolPointerComplex64PointerMap map[*bool]*complex64
	
func (m BoolPointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type BoolPointerComplex128Map map[*bool]complex128
	
func (m BoolPointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type BoolPointerComplex128PointerMap map[*bool]*complex128
	
func (m BoolPointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type BoolPointerFloat32Map map[*bool]float32
	
func (m BoolPointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type BoolPointerFloat32PointerMap map[*bool]*float32
	
func (m BoolPointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type BoolPointerFloat64Map map[*bool]float64
	
func (m BoolPointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type BoolPointerFloat64PointerMap map[*bool]*float64
	
func (m BoolPointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type BoolPointerUintptrMap map[*bool]uintptr
	
func (m BoolPointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type BoolPointerUintptrPointerMap map[*bool]*uintptr
	
func (m BoolPointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type BoolPointerTimeMap map[*bool]time.Time
	
func (m BoolPointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type BoolPointerTimePointerMap map[*bool]*time.Time
	
func (m BoolPointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type BoolPointerByteStringMap map[*bool][]byte
	
func (m BoolPointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type BoolPointerByteStringPointerMap map[*bool]*[]byte
	
func (m BoolPointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type BoolPointerInterfaceMap map[*bool]interface{}

func (m BoolPointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type BoolPointerStringMap map[*bool]string
	
func (m BoolPointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type BoolPointerStringPointerMap map[*bool]*string
	
func (m BoolPointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Complex64IntMap map[complex64]int
	
func (m Complex64IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Complex64IntPointerMap map[complex64]*int
	
func (m Complex64IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Complex64Int8Map map[complex64]int8
	
func (m Complex64Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Complex64Int8PointerMap map[complex64]*int8
	
func (m Complex64Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Complex64Int16Map map[complex64]int16
	
func (m Complex64Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Complex64Int16PointerMap map[complex64]*int16
	
func (m Complex64Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Complex64Int32Map map[complex64]int32
	
func (m Complex64Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Complex64Int32PointerMap map[complex64]*int32
	
func (m Complex64Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Complex64Int64Map map[complex64]int64
	
func (m Complex64Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Complex64Int64PointerMap map[complex64]*int64
	
func (m Complex64Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Complex64UintMap map[complex64]uint
	
func (m Complex64UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Complex64UintPointerMap map[complex64]*uint
	
func (m Complex64UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Complex64Uint8Map map[complex64]uint8
	
func (m Complex64Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Complex64Uint8PointerMap map[complex64]*uint8
	
func (m Complex64Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Complex64Uint16Map map[complex64]uint16
	
func (m Complex64Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Complex64Uint16PointerMap map[complex64]*uint16
	
func (m Complex64Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Complex64Uint32Map map[complex64]uint32
	
func (m Complex64Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Complex64Uint32PointerMap map[complex64]*uint32
	
func (m Complex64Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Complex64Uint64Map map[complex64]uint64
	
func (m Complex64Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Complex64Uint64PointerMap map[complex64]*uint64
	
func (m Complex64Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Complex64BoolMap map[complex64]bool
	
func (m Complex64BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Complex64BoolPointerMap map[complex64]*bool
	
func (m Complex64BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Complex64Complex64Map map[complex64]complex64
	
func (m Complex64Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Complex64Complex64PointerMap map[complex64]*complex64
	
func (m Complex64Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Complex64Complex128Map map[complex64]complex128
	
func (m Complex64Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Complex64Complex128PointerMap map[complex64]*complex128
	
func (m Complex64Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Complex64Float32Map map[complex64]float32
	
func (m Complex64Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Complex64Float32PointerMap map[complex64]*float32
	
func (m Complex64Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Complex64Float64Map map[complex64]float64
	
func (m Complex64Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Complex64Float64PointerMap map[complex64]*float64
	
func (m Complex64Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Complex64UintptrMap map[complex64]uintptr
	
func (m Complex64UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Complex64UintptrPointerMap map[complex64]*uintptr
	
func (m Complex64UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Complex64TimeMap map[complex64]time.Time
	
func (m Complex64TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Complex64TimePointerMap map[complex64]*time.Time
	
func (m Complex64TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Complex64ByteStringMap map[complex64][]byte
	
func (m Complex64ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Complex64ByteStringPointerMap map[complex64]*[]byte
	
func (m Complex64ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Complex64InterfaceMap map[complex64]interface{}

func (m Complex64InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Complex64StringMap map[complex64]string
	
func (m Complex64StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Complex64StringPointerMap map[complex64]*string
	
func (m Complex64StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Complex64PointerIntMap map[*complex64]int
	
func (m Complex64PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Complex64PointerIntPointerMap map[*complex64]*int
	
func (m Complex64PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Complex64PointerInt8Map map[*complex64]int8
	
func (m Complex64PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Complex64PointerInt8PointerMap map[*complex64]*int8
	
func (m Complex64PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Complex64PointerInt16Map map[*complex64]int16
	
func (m Complex64PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Complex64PointerInt16PointerMap map[*complex64]*int16
	
func (m Complex64PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Complex64PointerInt32Map map[*complex64]int32
	
func (m Complex64PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Complex64PointerInt32PointerMap map[*complex64]*int32
	
func (m Complex64PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Complex64PointerInt64Map map[*complex64]int64
	
func (m Complex64PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Complex64PointerInt64PointerMap map[*complex64]*int64
	
func (m Complex64PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Complex64PointerUintMap map[*complex64]uint
	
func (m Complex64PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Complex64PointerUintPointerMap map[*complex64]*uint
	
func (m Complex64PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Complex64PointerUint8Map map[*complex64]uint8
	
func (m Complex64PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Complex64PointerUint8PointerMap map[*complex64]*uint8
	
func (m Complex64PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Complex64PointerUint16Map map[*complex64]uint16
	
func (m Complex64PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Complex64PointerUint16PointerMap map[*complex64]*uint16
	
func (m Complex64PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Complex64PointerUint32Map map[*complex64]uint32
	
func (m Complex64PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Complex64PointerUint32PointerMap map[*complex64]*uint32
	
func (m Complex64PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Complex64PointerUint64Map map[*complex64]uint64
	
func (m Complex64PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Complex64PointerUint64PointerMap map[*complex64]*uint64
	
func (m Complex64PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Complex64PointerBoolMap map[*complex64]bool
	
func (m Complex64PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Complex64PointerBoolPointerMap map[*complex64]*bool
	
func (m Complex64PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Complex64PointerComplex64Map map[*complex64]complex64
	
func (m Complex64PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Complex64PointerComplex64PointerMap map[*complex64]*complex64
	
func (m Complex64PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Complex64PointerComplex128Map map[*complex64]complex128
	
func (m Complex64PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Complex64PointerComplex128PointerMap map[*complex64]*complex128
	
func (m Complex64PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Complex64PointerFloat32Map map[*complex64]float32
	
func (m Complex64PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Complex64PointerFloat32PointerMap map[*complex64]*float32
	
func (m Complex64PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Complex64PointerFloat64Map map[*complex64]float64
	
func (m Complex64PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Complex64PointerFloat64PointerMap map[*complex64]*float64
	
func (m Complex64PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Complex64PointerUintptrMap map[*complex64]uintptr
	
func (m Complex64PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Complex64PointerUintptrPointerMap map[*complex64]*uintptr
	
func (m Complex64PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Complex64PointerTimeMap map[*complex64]time.Time
	
func (m Complex64PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Complex64PointerTimePointerMap map[*complex64]*time.Time
	
func (m Complex64PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Complex64PointerByteStringMap map[*complex64][]byte
	
func (m Complex64PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Complex64PointerByteStringPointerMap map[*complex64]*[]byte
	
func (m Complex64PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Complex64PointerInterfaceMap map[*complex64]interface{}

func (m Complex64PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Complex64PointerStringMap map[*complex64]string
	
func (m Complex64PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Complex64PointerStringPointerMap map[*complex64]*string
	
func (m Complex64PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Complex128IntMap map[complex128]int
	
func (m Complex128IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Complex128IntPointerMap map[complex128]*int
	
func (m Complex128IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Complex128Int8Map map[complex128]int8
	
func (m Complex128Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Complex128Int8PointerMap map[complex128]*int8
	
func (m Complex128Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Complex128Int16Map map[complex128]int16
	
func (m Complex128Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Complex128Int16PointerMap map[complex128]*int16
	
func (m Complex128Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Complex128Int32Map map[complex128]int32
	
func (m Complex128Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Complex128Int32PointerMap map[complex128]*int32
	
func (m Complex128Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Complex128Int64Map map[complex128]int64
	
func (m Complex128Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Complex128Int64PointerMap map[complex128]*int64
	
func (m Complex128Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Complex128UintMap map[complex128]uint
	
func (m Complex128UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Complex128UintPointerMap map[complex128]*uint
	
func (m Complex128UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Complex128Uint8Map map[complex128]uint8
	
func (m Complex128Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Complex128Uint8PointerMap map[complex128]*uint8
	
func (m Complex128Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Complex128Uint16Map map[complex128]uint16
	
func (m Complex128Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Complex128Uint16PointerMap map[complex128]*uint16
	
func (m Complex128Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Complex128Uint32Map map[complex128]uint32
	
func (m Complex128Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Complex128Uint32PointerMap map[complex128]*uint32
	
func (m Complex128Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Complex128Uint64Map map[complex128]uint64
	
func (m Complex128Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Complex128Uint64PointerMap map[complex128]*uint64
	
func (m Complex128Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Complex128BoolMap map[complex128]bool
	
func (m Complex128BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Complex128BoolPointerMap map[complex128]*bool
	
func (m Complex128BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Complex128Complex64Map map[complex128]complex64
	
func (m Complex128Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Complex128Complex64PointerMap map[complex128]*complex64
	
func (m Complex128Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Complex128Complex128Map map[complex128]complex128
	
func (m Complex128Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Complex128Complex128PointerMap map[complex128]*complex128
	
func (m Complex128Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Complex128Float32Map map[complex128]float32
	
func (m Complex128Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Complex128Float32PointerMap map[complex128]*float32
	
func (m Complex128Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Complex128Float64Map map[complex128]float64
	
func (m Complex128Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Complex128Float64PointerMap map[complex128]*float64
	
func (m Complex128Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Complex128UintptrMap map[complex128]uintptr
	
func (m Complex128UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Complex128UintptrPointerMap map[complex128]*uintptr
	
func (m Complex128UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Complex128TimeMap map[complex128]time.Time
	
func (m Complex128TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Complex128TimePointerMap map[complex128]*time.Time
	
func (m Complex128TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Complex128ByteStringMap map[complex128][]byte
	
func (m Complex128ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Complex128ByteStringPointerMap map[complex128]*[]byte
	
func (m Complex128ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Complex128InterfaceMap map[complex128]interface{}

func (m Complex128InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Complex128StringMap map[complex128]string
	
func (m Complex128StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Complex128StringPointerMap map[complex128]*string
	
func (m Complex128StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Complex128PointerIntMap map[*complex128]int
	
func (m Complex128PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Complex128PointerIntPointerMap map[*complex128]*int
	
func (m Complex128PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Complex128PointerInt8Map map[*complex128]int8
	
func (m Complex128PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Complex128PointerInt8PointerMap map[*complex128]*int8
	
func (m Complex128PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Complex128PointerInt16Map map[*complex128]int16
	
func (m Complex128PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Complex128PointerInt16PointerMap map[*complex128]*int16
	
func (m Complex128PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Complex128PointerInt32Map map[*complex128]int32
	
func (m Complex128PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Complex128PointerInt32PointerMap map[*complex128]*int32
	
func (m Complex128PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Complex128PointerInt64Map map[*complex128]int64
	
func (m Complex128PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Complex128PointerInt64PointerMap map[*complex128]*int64
	
func (m Complex128PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Complex128PointerUintMap map[*complex128]uint
	
func (m Complex128PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Complex128PointerUintPointerMap map[*complex128]*uint
	
func (m Complex128PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Complex128PointerUint8Map map[*complex128]uint8
	
func (m Complex128PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Complex128PointerUint8PointerMap map[*complex128]*uint8
	
func (m Complex128PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Complex128PointerUint16Map map[*complex128]uint16
	
func (m Complex128PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Complex128PointerUint16PointerMap map[*complex128]*uint16
	
func (m Complex128PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Complex128PointerUint32Map map[*complex128]uint32
	
func (m Complex128PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Complex128PointerUint32PointerMap map[*complex128]*uint32
	
func (m Complex128PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Complex128PointerUint64Map map[*complex128]uint64
	
func (m Complex128PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Complex128PointerUint64PointerMap map[*complex128]*uint64
	
func (m Complex128PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Complex128PointerBoolMap map[*complex128]bool
	
func (m Complex128PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Complex128PointerBoolPointerMap map[*complex128]*bool
	
func (m Complex128PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Complex128PointerComplex64Map map[*complex128]complex64
	
func (m Complex128PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Complex128PointerComplex64PointerMap map[*complex128]*complex64
	
func (m Complex128PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Complex128PointerComplex128Map map[*complex128]complex128
	
func (m Complex128PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Complex128PointerComplex128PointerMap map[*complex128]*complex128
	
func (m Complex128PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Complex128PointerFloat32Map map[*complex128]float32
	
func (m Complex128PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Complex128PointerFloat32PointerMap map[*complex128]*float32
	
func (m Complex128PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Complex128PointerFloat64Map map[*complex128]float64
	
func (m Complex128PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Complex128PointerFloat64PointerMap map[*complex128]*float64
	
func (m Complex128PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Complex128PointerUintptrMap map[*complex128]uintptr
	
func (m Complex128PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Complex128PointerUintptrPointerMap map[*complex128]*uintptr
	
func (m Complex128PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Complex128PointerTimeMap map[*complex128]time.Time
	
func (m Complex128PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Complex128PointerTimePointerMap map[*complex128]*time.Time
	
func (m Complex128PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Complex128PointerByteStringMap map[*complex128][]byte
	
func (m Complex128PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Complex128PointerByteStringPointerMap map[*complex128]*[]byte
	
func (m Complex128PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Complex128PointerInterfaceMap map[*complex128]interface{}

func (m Complex128PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Complex128PointerStringMap map[*complex128]string
	
func (m Complex128PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Complex128PointerStringPointerMap map[*complex128]*string
	
func (m Complex128PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Float32IntMap map[float32]int
	
func (m Float32IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Float32IntPointerMap map[float32]*int
	
func (m Float32IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Float32Int8Map map[float32]int8
	
func (m Float32Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Float32Int8PointerMap map[float32]*int8
	
func (m Float32Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Float32Int16Map map[float32]int16
	
func (m Float32Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Float32Int16PointerMap map[float32]*int16
	
func (m Float32Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Float32Int32Map map[float32]int32
	
func (m Float32Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Float32Int32PointerMap map[float32]*int32
	
func (m Float32Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Float32Int64Map map[float32]int64
	
func (m Float32Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Float32Int64PointerMap map[float32]*int64
	
func (m Float32Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Float32UintMap map[float32]uint
	
func (m Float32UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Float32UintPointerMap map[float32]*uint
	
func (m Float32UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Float32Uint8Map map[float32]uint8
	
func (m Float32Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Float32Uint8PointerMap map[float32]*uint8
	
func (m Float32Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Float32Uint16Map map[float32]uint16
	
func (m Float32Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Float32Uint16PointerMap map[float32]*uint16
	
func (m Float32Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Float32Uint32Map map[float32]uint32
	
func (m Float32Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Float32Uint32PointerMap map[float32]*uint32
	
func (m Float32Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Float32Uint64Map map[float32]uint64
	
func (m Float32Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Float32Uint64PointerMap map[float32]*uint64
	
func (m Float32Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Float32BoolMap map[float32]bool
	
func (m Float32BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Float32BoolPointerMap map[float32]*bool
	
func (m Float32BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Float32Complex64Map map[float32]complex64
	
func (m Float32Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Float32Complex64PointerMap map[float32]*complex64
	
func (m Float32Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Float32Complex128Map map[float32]complex128
	
func (m Float32Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Float32Complex128PointerMap map[float32]*complex128
	
func (m Float32Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Float32Float32Map map[float32]float32
	
func (m Float32Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Float32Float32PointerMap map[float32]*float32
	
func (m Float32Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Float32Float64Map map[float32]float64
	
func (m Float32Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Float32Float64PointerMap map[float32]*float64
	
func (m Float32Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Float32UintptrMap map[float32]uintptr
	
func (m Float32UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Float32UintptrPointerMap map[float32]*uintptr
	
func (m Float32UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Float32TimeMap map[float32]time.Time
	
func (m Float32TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Float32TimePointerMap map[float32]*time.Time
	
func (m Float32TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Float32ByteStringMap map[float32][]byte
	
func (m Float32ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Float32ByteStringPointerMap map[float32]*[]byte
	
func (m Float32ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Float32InterfaceMap map[float32]interface{}

func (m Float32InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Float32StringMap map[float32]string
	
func (m Float32StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Float32StringPointerMap map[float32]*string
	
func (m Float32StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Float32PointerIntMap map[*float32]int
	
func (m Float32PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Float32PointerIntPointerMap map[*float32]*int
	
func (m Float32PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Float32PointerInt8Map map[*float32]int8
	
func (m Float32PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Float32PointerInt8PointerMap map[*float32]*int8
	
func (m Float32PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Float32PointerInt16Map map[*float32]int16
	
func (m Float32PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Float32PointerInt16PointerMap map[*float32]*int16
	
func (m Float32PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Float32PointerInt32Map map[*float32]int32
	
func (m Float32PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Float32PointerInt32PointerMap map[*float32]*int32
	
func (m Float32PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Float32PointerInt64Map map[*float32]int64
	
func (m Float32PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Float32PointerInt64PointerMap map[*float32]*int64
	
func (m Float32PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Float32PointerUintMap map[*float32]uint
	
func (m Float32PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Float32PointerUintPointerMap map[*float32]*uint
	
func (m Float32PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Float32PointerUint8Map map[*float32]uint8
	
func (m Float32PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Float32PointerUint8PointerMap map[*float32]*uint8
	
func (m Float32PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Float32PointerUint16Map map[*float32]uint16
	
func (m Float32PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Float32PointerUint16PointerMap map[*float32]*uint16
	
func (m Float32PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Float32PointerUint32Map map[*float32]uint32
	
func (m Float32PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Float32PointerUint32PointerMap map[*float32]*uint32
	
func (m Float32PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Float32PointerUint64Map map[*float32]uint64
	
func (m Float32PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Float32PointerUint64PointerMap map[*float32]*uint64
	
func (m Float32PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Float32PointerBoolMap map[*float32]bool
	
func (m Float32PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Float32PointerBoolPointerMap map[*float32]*bool
	
func (m Float32PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Float32PointerComplex64Map map[*float32]complex64
	
func (m Float32PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Float32PointerComplex64PointerMap map[*float32]*complex64
	
func (m Float32PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Float32PointerComplex128Map map[*float32]complex128
	
func (m Float32PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Float32PointerComplex128PointerMap map[*float32]*complex128
	
func (m Float32PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Float32PointerFloat32Map map[*float32]float32
	
func (m Float32PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Float32PointerFloat32PointerMap map[*float32]*float32
	
func (m Float32PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Float32PointerFloat64Map map[*float32]float64
	
func (m Float32PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Float32PointerFloat64PointerMap map[*float32]*float64
	
func (m Float32PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Float32PointerUintptrMap map[*float32]uintptr
	
func (m Float32PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Float32PointerUintptrPointerMap map[*float32]*uintptr
	
func (m Float32PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Float32PointerTimeMap map[*float32]time.Time
	
func (m Float32PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Float32PointerTimePointerMap map[*float32]*time.Time
	
func (m Float32PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Float32PointerByteStringMap map[*float32][]byte
	
func (m Float32PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Float32PointerByteStringPointerMap map[*float32]*[]byte
	
func (m Float32PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Float32PointerInterfaceMap map[*float32]interface{}

func (m Float32PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Float32PointerStringMap map[*float32]string
	
func (m Float32PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Float32PointerStringPointerMap map[*float32]*string
	
func (m Float32PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Float64IntMap map[float64]int
	
func (m Float64IntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Float64IntPointerMap map[float64]*int
	
func (m Float64IntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Float64Int8Map map[float64]int8
	
func (m Float64Int8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Float64Int8PointerMap map[float64]*int8
	
func (m Float64Int8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Float64Int16Map map[float64]int16
	
func (m Float64Int16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Float64Int16PointerMap map[float64]*int16
	
func (m Float64Int16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Float64Int32Map map[float64]int32
	
func (m Float64Int32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Float64Int32PointerMap map[float64]*int32
	
func (m Float64Int32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Float64Int64Map map[float64]int64
	
func (m Float64Int64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Float64Int64PointerMap map[float64]*int64
	
func (m Float64Int64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Float64UintMap map[float64]uint
	
func (m Float64UintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Float64UintPointerMap map[float64]*uint
	
func (m Float64UintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Float64Uint8Map map[float64]uint8
	
func (m Float64Uint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Float64Uint8PointerMap map[float64]*uint8
	
func (m Float64Uint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Float64Uint16Map map[float64]uint16
	
func (m Float64Uint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Float64Uint16PointerMap map[float64]*uint16
	
func (m Float64Uint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Float64Uint32Map map[float64]uint32
	
func (m Float64Uint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Float64Uint32PointerMap map[float64]*uint32
	
func (m Float64Uint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Float64Uint64Map map[float64]uint64
	
func (m Float64Uint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Float64Uint64PointerMap map[float64]*uint64
	
func (m Float64Uint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Float64BoolMap map[float64]bool
	
func (m Float64BoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Float64BoolPointerMap map[float64]*bool
	
func (m Float64BoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Float64Complex64Map map[float64]complex64
	
func (m Float64Complex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Float64Complex64PointerMap map[float64]*complex64
	
func (m Float64Complex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Float64Complex128Map map[float64]complex128
	
func (m Float64Complex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Float64Complex128PointerMap map[float64]*complex128
	
func (m Float64Complex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Float64Float32Map map[float64]float32
	
func (m Float64Float32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Float64Float32PointerMap map[float64]*float32
	
func (m Float64Float32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Float64Float64Map map[float64]float64
	
func (m Float64Float64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Float64Float64PointerMap map[float64]*float64
	
func (m Float64Float64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Float64UintptrMap map[float64]uintptr
	
func (m Float64UintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Float64UintptrPointerMap map[float64]*uintptr
	
func (m Float64UintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Float64TimeMap map[float64]time.Time
	
func (m Float64TimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Float64TimePointerMap map[float64]*time.Time
	
func (m Float64TimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Float64ByteStringMap map[float64][]byte
	
func (m Float64ByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Float64ByteStringPointerMap map[float64]*[]byte
	
func (m Float64ByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Float64InterfaceMap map[float64]interface{}

func (m Float64InterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Float64StringMap map[float64]string
	
func (m Float64StringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Float64StringPointerMap map[float64]*string
	
func (m Float64StringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type Float64PointerIntMap map[*float64]int
	
func (m Float64PointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type Float64PointerIntPointerMap map[*float64]*int
	
func (m Float64PointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type Float64PointerInt8Map map[*float64]int8
	
func (m Float64PointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type Float64PointerInt8PointerMap map[*float64]*int8
	
func (m Float64PointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type Float64PointerInt16Map map[*float64]int16
	
func (m Float64PointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type Float64PointerInt16PointerMap map[*float64]*int16
	
func (m Float64PointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type Float64PointerInt32Map map[*float64]int32
	
func (m Float64PointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type Float64PointerInt32PointerMap map[*float64]*int32
	
func (m Float64PointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type Float64PointerInt64Map map[*float64]int64
	
func (m Float64PointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type Float64PointerInt64PointerMap map[*float64]*int64
	
func (m Float64PointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type Float64PointerUintMap map[*float64]uint
	
func (m Float64PointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type Float64PointerUintPointerMap map[*float64]*uint
	
func (m Float64PointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type Float64PointerUint8Map map[*float64]uint8
	
func (m Float64PointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type Float64PointerUint8PointerMap map[*float64]*uint8
	
func (m Float64PointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type Float64PointerUint16Map map[*float64]uint16
	
func (m Float64PointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type Float64PointerUint16PointerMap map[*float64]*uint16
	
func (m Float64PointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type Float64PointerUint32Map map[*float64]uint32
	
func (m Float64PointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type Float64PointerUint32PointerMap map[*float64]*uint32
	
func (m Float64PointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type Float64PointerUint64Map map[*float64]uint64
	
func (m Float64PointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type Float64PointerUint64PointerMap map[*float64]*uint64
	
func (m Float64PointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type Float64PointerBoolMap map[*float64]bool
	
func (m Float64PointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type Float64PointerBoolPointerMap map[*float64]*bool
	
func (m Float64PointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type Float64PointerComplex64Map map[*float64]complex64
	
func (m Float64PointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type Float64PointerComplex64PointerMap map[*float64]*complex64
	
func (m Float64PointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type Float64PointerComplex128Map map[*float64]complex128
	
func (m Float64PointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type Float64PointerComplex128PointerMap map[*float64]*complex128
	
func (m Float64PointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type Float64PointerFloat32Map map[*float64]float32
	
func (m Float64PointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type Float64PointerFloat32PointerMap map[*float64]*float32
	
func (m Float64PointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type Float64PointerFloat64Map map[*float64]float64
	
func (m Float64PointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type Float64PointerFloat64PointerMap map[*float64]*float64
	
func (m Float64PointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type Float64PointerUintptrMap map[*float64]uintptr
	
func (m Float64PointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type Float64PointerUintptrPointerMap map[*float64]*uintptr
	
func (m Float64PointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type Float64PointerTimeMap map[*float64]time.Time
	
func (m Float64PointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type Float64PointerTimePointerMap map[*float64]*time.Time
	
func (m Float64PointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type Float64PointerByteStringMap map[*float64][]byte
	
func (m Float64PointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type Float64PointerByteStringPointerMap map[*float64]*[]byte
	
func (m Float64PointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type Float64PointerInterfaceMap map[*float64]interface{}

func (m Float64PointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type Float64PointerStringMap map[*float64]string
	
func (m Float64PointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type Float64PointerStringPointerMap map[*float64]*string
	
func (m Float64PointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type UintptrIntMap map[uintptr]int
	
func (m UintptrIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type UintptrIntPointerMap map[uintptr]*int
	
func (m UintptrIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type UintptrInt8Map map[uintptr]int8
	
func (m UintptrInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type UintptrInt8PointerMap map[uintptr]*int8
	
func (m UintptrInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type UintptrInt16Map map[uintptr]int16
	
func (m UintptrInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type UintptrInt16PointerMap map[uintptr]*int16
	
func (m UintptrInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type UintptrInt32Map map[uintptr]int32
	
func (m UintptrInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type UintptrInt32PointerMap map[uintptr]*int32
	
func (m UintptrInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type UintptrInt64Map map[uintptr]int64
	
func (m UintptrInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type UintptrInt64PointerMap map[uintptr]*int64
	
func (m UintptrInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type UintptrUintMap map[uintptr]uint
	
func (m UintptrUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type UintptrUintPointerMap map[uintptr]*uint
	
func (m UintptrUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type UintptrUint8Map map[uintptr]uint8
	
func (m UintptrUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type UintptrUint8PointerMap map[uintptr]*uint8
	
func (m UintptrUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type UintptrUint16Map map[uintptr]uint16
	
func (m UintptrUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type UintptrUint16PointerMap map[uintptr]*uint16
	
func (m UintptrUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type UintptrUint32Map map[uintptr]uint32
	
func (m UintptrUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type UintptrUint32PointerMap map[uintptr]*uint32
	
func (m UintptrUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type UintptrUint64Map map[uintptr]uint64
	
func (m UintptrUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type UintptrUint64PointerMap map[uintptr]*uint64
	
func (m UintptrUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type UintptrBoolMap map[uintptr]bool
	
func (m UintptrBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type UintptrBoolPointerMap map[uintptr]*bool
	
func (m UintptrBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type UintptrComplex64Map map[uintptr]complex64
	
func (m UintptrComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type UintptrComplex64PointerMap map[uintptr]*complex64
	
func (m UintptrComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type UintptrComplex128Map map[uintptr]complex128
	
func (m UintptrComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type UintptrComplex128PointerMap map[uintptr]*complex128
	
func (m UintptrComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type UintptrFloat32Map map[uintptr]float32
	
func (m UintptrFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type UintptrFloat32PointerMap map[uintptr]*float32
	
func (m UintptrFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type UintptrFloat64Map map[uintptr]float64
	
func (m UintptrFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type UintptrFloat64PointerMap map[uintptr]*float64
	
func (m UintptrFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type UintptrUintptrMap map[uintptr]uintptr
	
func (m UintptrUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type UintptrUintptrPointerMap map[uintptr]*uintptr
	
func (m UintptrUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type UintptrTimeMap map[uintptr]time.Time
	
func (m UintptrTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type UintptrTimePointerMap map[uintptr]*time.Time
	
func (m UintptrTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type UintptrByteStringMap map[uintptr][]byte
	
func (m UintptrByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type UintptrByteStringPointerMap map[uintptr]*[]byte
	
func (m UintptrByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type UintptrInterfaceMap map[uintptr]interface{}

func (m UintptrInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type UintptrStringMap map[uintptr]string
	
func (m UintptrStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type UintptrStringPointerMap map[uintptr]*string
	
func (m UintptrStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type UintptrPointerIntMap map[*uintptr]int
	
func (m UintptrPointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type UintptrPointerIntPointerMap map[*uintptr]*int
	
func (m UintptrPointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type UintptrPointerInt8Map map[*uintptr]int8
	
func (m UintptrPointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type UintptrPointerInt8PointerMap map[*uintptr]*int8
	
func (m UintptrPointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type UintptrPointerInt16Map map[*uintptr]int16
	
func (m UintptrPointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type UintptrPointerInt16PointerMap map[*uintptr]*int16
	
func (m UintptrPointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type UintptrPointerInt32Map map[*uintptr]int32
	
func (m UintptrPointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type UintptrPointerInt32PointerMap map[*uintptr]*int32
	
func (m UintptrPointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type UintptrPointerInt64Map map[*uintptr]int64
	
func (m UintptrPointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type UintptrPointerInt64PointerMap map[*uintptr]*int64
	
func (m UintptrPointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type UintptrPointerUintMap map[*uintptr]uint
	
func (m UintptrPointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type UintptrPointerUintPointerMap map[*uintptr]*uint
	
func (m UintptrPointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type UintptrPointerUint8Map map[*uintptr]uint8
	
func (m UintptrPointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type UintptrPointerUint8PointerMap map[*uintptr]*uint8
	
func (m UintptrPointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type UintptrPointerUint16Map map[*uintptr]uint16
	
func (m UintptrPointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type UintptrPointerUint16PointerMap map[*uintptr]*uint16
	
func (m UintptrPointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type UintptrPointerUint32Map map[*uintptr]uint32
	
func (m UintptrPointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type UintptrPointerUint32PointerMap map[*uintptr]*uint32
	
func (m UintptrPointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type UintptrPointerUint64Map map[*uintptr]uint64
	
func (m UintptrPointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type UintptrPointerUint64PointerMap map[*uintptr]*uint64
	
func (m UintptrPointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type UintptrPointerBoolMap map[*uintptr]bool
	
func (m UintptrPointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type UintptrPointerBoolPointerMap map[*uintptr]*bool
	
func (m UintptrPointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type UintptrPointerComplex64Map map[*uintptr]complex64
	
func (m UintptrPointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type UintptrPointerComplex64PointerMap map[*uintptr]*complex64
	
func (m UintptrPointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type UintptrPointerComplex128Map map[*uintptr]complex128
	
func (m UintptrPointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type UintptrPointerComplex128PointerMap map[*uintptr]*complex128
	
func (m UintptrPointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type UintptrPointerFloat32Map map[*uintptr]float32
	
func (m UintptrPointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type UintptrPointerFloat32PointerMap map[*uintptr]*float32
	
func (m UintptrPointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type UintptrPointerFloat64Map map[*uintptr]float64
	
func (m UintptrPointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type UintptrPointerFloat64PointerMap map[*uintptr]*float64
	
func (m UintptrPointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type UintptrPointerUintptrMap map[*uintptr]uintptr
	
func (m UintptrPointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type UintptrPointerUintptrPointerMap map[*uintptr]*uintptr
	
func (m UintptrPointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type UintptrPointerTimeMap map[*uintptr]time.Time
	
func (m UintptrPointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type UintptrPointerTimePointerMap map[*uintptr]*time.Time
	
func (m UintptrPointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type UintptrPointerByteStringMap map[*uintptr][]byte
	
func (m UintptrPointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type UintptrPointerByteStringPointerMap map[*uintptr]*[]byte
	
func (m UintptrPointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type UintptrPointerInterfaceMap map[*uintptr]interface{}

func (m UintptrPointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type UintptrPointerStringMap map[*uintptr]string
	
func (m UintptrPointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type UintptrPointerStringPointerMap map[*uintptr]*string
	
func (m UintptrPointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type TimeIntMap map[time.Time]int
	
func (m TimeIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type TimeIntPointerMap map[time.Time]*int
	
func (m TimeIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type TimeInt8Map map[time.Time]int8
	
func (m TimeInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type TimeInt8PointerMap map[time.Time]*int8
	
func (m TimeInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type TimeInt16Map map[time.Time]int16
	
func (m TimeInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type TimeInt16PointerMap map[time.Time]*int16
	
func (m TimeInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type TimeInt32Map map[time.Time]int32
	
func (m TimeInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type TimeInt32PointerMap map[time.Time]*int32
	
func (m TimeInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type TimeInt64Map map[time.Time]int64
	
func (m TimeInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type TimeInt64PointerMap map[time.Time]*int64
	
func (m TimeInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type TimeUintMap map[time.Time]uint
	
func (m TimeUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type TimeUintPointerMap map[time.Time]*uint
	
func (m TimeUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type TimeUint8Map map[time.Time]uint8
	
func (m TimeUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type TimeUint8PointerMap map[time.Time]*uint8
	
func (m TimeUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type TimeUint16Map map[time.Time]uint16
	
func (m TimeUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type TimeUint16PointerMap map[time.Time]*uint16
	
func (m TimeUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type TimeUint32Map map[time.Time]uint32
	
func (m TimeUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type TimeUint32PointerMap map[time.Time]*uint32
	
func (m TimeUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type TimeUint64Map map[time.Time]uint64
	
func (m TimeUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type TimeUint64PointerMap map[time.Time]*uint64
	
func (m TimeUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type TimeBoolMap map[time.Time]bool
	
func (m TimeBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type TimeBoolPointerMap map[time.Time]*bool
	
func (m TimeBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type TimeComplex64Map map[time.Time]complex64
	
func (m TimeComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type TimeComplex64PointerMap map[time.Time]*complex64
	
func (m TimeComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type TimeComplex128Map map[time.Time]complex128
	
func (m TimeComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type TimeComplex128PointerMap map[time.Time]*complex128
	
func (m TimeComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type TimeFloat32Map map[time.Time]float32
	
func (m TimeFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type TimeFloat32PointerMap map[time.Time]*float32
	
func (m TimeFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type TimeFloat64Map map[time.Time]float64
	
func (m TimeFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type TimeFloat64PointerMap map[time.Time]*float64
	
func (m TimeFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type TimeUintptrMap map[time.Time]uintptr
	
func (m TimeUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type TimeUintptrPointerMap map[time.Time]*uintptr
	
func (m TimeUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type TimeTimeMap map[time.Time]time.Time
	
func (m TimeTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type TimeTimePointerMap map[time.Time]*time.Time
	
func (m TimeTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type TimeByteStringMap map[time.Time][]byte
	
func (m TimeByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type TimeByteStringPointerMap map[time.Time]*[]byte
	
func (m TimeByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type TimeInterfaceMap map[time.Time]interface{}

func (m TimeInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type TimeStringMap map[time.Time]string
	
func (m TimeStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type TimeStringPointerMap map[time.Time]*string
	
func (m TimeStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type TimePointerIntMap map[*time.Time]int
	
func (m TimePointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type TimePointerIntPointerMap map[*time.Time]*int
	
func (m TimePointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type TimePointerInt8Map map[*time.Time]int8
	
func (m TimePointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type TimePointerInt8PointerMap map[*time.Time]*int8
	
func (m TimePointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type TimePointerInt16Map map[*time.Time]int16
	
func (m TimePointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type TimePointerInt16PointerMap map[*time.Time]*int16
	
func (m TimePointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type TimePointerInt32Map map[*time.Time]int32
	
func (m TimePointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type TimePointerInt32PointerMap map[*time.Time]*int32
	
func (m TimePointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type TimePointerInt64Map map[*time.Time]int64
	
func (m TimePointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type TimePointerInt64PointerMap map[*time.Time]*int64
	
func (m TimePointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type TimePointerUintMap map[*time.Time]uint
	
func (m TimePointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type TimePointerUintPointerMap map[*time.Time]*uint
	
func (m TimePointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type TimePointerUint8Map map[*time.Time]uint8
	
func (m TimePointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type TimePointerUint8PointerMap map[*time.Time]*uint8
	
func (m TimePointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type TimePointerUint16Map map[*time.Time]uint16
	
func (m TimePointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type TimePointerUint16PointerMap map[*time.Time]*uint16
	
func (m TimePointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type TimePointerUint32Map map[*time.Time]uint32
	
func (m TimePointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type TimePointerUint32PointerMap map[*time.Time]*uint32
	
func (m TimePointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type TimePointerUint64Map map[*time.Time]uint64
	
func (m TimePointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type TimePointerUint64PointerMap map[*time.Time]*uint64
	
func (m TimePointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type TimePointerBoolMap map[*time.Time]bool
	
func (m TimePointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type TimePointerBoolPointerMap map[*time.Time]*bool
	
func (m TimePointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type TimePointerComplex64Map map[*time.Time]complex64
	
func (m TimePointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type TimePointerComplex64PointerMap map[*time.Time]*complex64
	
func (m TimePointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type TimePointerComplex128Map map[*time.Time]complex128
	
func (m TimePointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type TimePointerComplex128PointerMap map[*time.Time]*complex128
	
func (m TimePointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type TimePointerFloat32Map map[*time.Time]float32
	
func (m TimePointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type TimePointerFloat32PointerMap map[*time.Time]*float32
	
func (m TimePointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type TimePointerFloat64Map map[*time.Time]float64
	
func (m TimePointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type TimePointerFloat64PointerMap map[*time.Time]*float64
	
func (m TimePointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type TimePointerUintptrMap map[*time.Time]uintptr
	
func (m TimePointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type TimePointerUintptrPointerMap map[*time.Time]*uintptr
	
func (m TimePointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type TimePointerTimeMap map[*time.Time]time.Time
	
func (m TimePointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type TimePointerTimePointerMap map[*time.Time]*time.Time
	
func (m TimePointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type TimePointerByteStringMap map[*time.Time][]byte
	
func (m TimePointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type TimePointerByteStringPointerMap map[*time.Time]*[]byte
	
func (m TimePointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type TimePointerInterfaceMap map[*time.Time]interface{}

func (m TimePointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type TimePointerStringMap map[*time.Time]string
	
func (m TimePointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type TimePointerStringPointerMap map[*time.Time]*string
	
func (m TimePointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type StringIntMap map[string]int
	
func (m StringIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type StringIntPointerMap map[string]*int
	
func (m StringIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type StringInt8Map map[string]int8
	
func (m StringInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type StringInt8PointerMap map[string]*int8
	
func (m StringInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type StringInt16Map map[string]int16
	
func (m StringInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type StringInt16PointerMap map[string]*int16
	
func (m StringInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type StringInt32Map map[string]int32
	
func (m StringInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type StringInt32PointerMap map[string]*int32
	
func (m StringInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type StringInt64Map map[string]int64
	
func (m StringInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type StringInt64PointerMap map[string]*int64
	
func (m StringInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type StringUintMap map[string]uint
	
func (m StringUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type StringUintPointerMap map[string]*uint
	
func (m StringUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type StringUint8Map map[string]uint8
	
func (m StringUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type StringUint8PointerMap map[string]*uint8
	
func (m StringUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type StringUint16Map map[string]uint16
	
func (m StringUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type StringUint16PointerMap map[string]*uint16
	
func (m StringUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type StringUint32Map map[string]uint32
	
func (m StringUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type StringUint32PointerMap map[string]*uint32
	
func (m StringUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type StringUint64Map map[string]uint64
	
func (m StringUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type StringUint64PointerMap map[string]*uint64
	
func (m StringUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type StringBoolMap map[string]bool
	
func (m StringBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type StringBoolPointerMap map[string]*bool
	
func (m StringBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type StringComplex64Map map[string]complex64
	
func (m StringComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type StringComplex64PointerMap map[string]*complex64
	
func (m StringComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type StringComplex128Map map[string]complex128
	
func (m StringComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type StringComplex128PointerMap map[string]*complex128
	
func (m StringComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type StringFloat32Map map[string]float32
	
func (m StringFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type StringFloat32PointerMap map[string]*float32
	
func (m StringFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type StringFloat64Map map[string]float64
	
func (m StringFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type StringFloat64PointerMap map[string]*float64
	
func (m StringFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type StringUintptrMap map[string]uintptr
	
func (m StringUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type StringUintptrPointerMap map[string]*uintptr
	
func (m StringUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type StringTimeMap map[string]time.Time
	
func (m StringTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type StringTimePointerMap map[string]*time.Time
	
func (m StringTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type StringByteStringMap map[string][]byte
	
func (m StringByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type StringByteStringPointerMap map[string]*[]byte
	
func (m StringByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type StringInterfaceMap map[string]interface{}

func (m StringInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type StringStringMap map[string]string
	
func (m StringStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type StringStringPointerMap map[string]*string
	
func (m StringStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

type StringPointerIntMap map[*string]int
	
func (m StringPointerIntMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), v)
	}
	return nil
}

type StringPointerIntPointerMap map[*string]*int
	
func (m StringPointerIntPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt(str(k), *v)
	}
	return nil
}

type StringPointerInt8Map map[*string]int8
	
func (m StringPointerInt8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), v)
	}
	return nil
}

type StringPointerInt8PointerMap map[*string]*int8
	
func (m StringPointerInt8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt8(str(k), *v)
	}
	return nil
}

type StringPointerInt16Map map[*string]int16
	
func (m StringPointerInt16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), v)
	}
	return nil
}

type StringPointerInt16PointerMap map[*string]*int16
	
func (m StringPointerInt16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt16(str(k), *v)
	}
	return nil
}

type StringPointerInt32Map map[*string]int32
	
func (m StringPointerInt32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), v)
	}
	return nil
}

type StringPointerInt32PointerMap map[*string]*int32
	
func (m StringPointerInt32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt32(str(k), *v)
	}
	return nil
}

type StringPointerInt64Map map[*string]int64
	
func (m StringPointerInt64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), v)
	}
	return nil
}

type StringPointerInt64PointerMap map[*string]*int64
	
func (m StringPointerInt64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddInt64(str(k), *v)
	}
	return nil
}

type StringPointerUintMap map[*string]uint
	
func (m StringPointerUintMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), v)
	}
	return nil
}

type StringPointerUintPointerMap map[*string]*uint
	
func (m StringPointerUintPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint(str(k), *v)
	}
	return nil
}

type StringPointerUint8Map map[*string]uint8
	
func (m StringPointerUint8Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), v)
	}
	return nil
}

type StringPointerUint8PointerMap map[*string]*uint8
	
func (m StringPointerUint8PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint8(str(k), *v)
	}
	return nil
}

type StringPointerUint16Map map[*string]uint16
	
func (m StringPointerUint16Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), v)
	}
	return nil
}

type StringPointerUint16PointerMap map[*string]*uint16
	
func (m StringPointerUint16PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint16(str(k), *v)
	}
	return nil
}

type StringPointerUint32Map map[*string]uint32
	
func (m StringPointerUint32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), v)
	}
	return nil
}

type StringPointerUint32PointerMap map[*string]*uint32
	
func (m StringPointerUint32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint32(str(k), *v)
	}
	return nil
}

type StringPointerUint64Map map[*string]uint64
	
func (m StringPointerUint64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), v)
	}
	return nil
}

type StringPointerUint64PointerMap map[*string]*uint64
	
func (m StringPointerUint64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUint64(str(k), *v)
	}
	return nil
}

type StringPointerBoolMap map[*string]bool
	
func (m StringPointerBoolMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), v)
	}
	return nil
}

type StringPointerBoolPointerMap map[*string]*bool
	
func (m StringPointerBoolPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddBool(str(k), *v)
	}
	return nil
}

type StringPointerComplex64Map map[*string]complex64
	
func (m StringPointerComplex64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), v)
	}
	return nil
}

type StringPointerComplex64PointerMap map[*string]*complex64
	
func (m StringPointerComplex64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex64(str(k), *v)
	}
	return nil
}

type StringPointerComplex128Map map[*string]complex128
	
func (m StringPointerComplex128Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), v)
	}
	return nil
}

type StringPointerComplex128PointerMap map[*string]*complex128
	
func (m StringPointerComplex128PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddComplex128(str(k), *v)
	}
	return nil
}

type StringPointerFloat32Map map[*string]float32
	
func (m StringPointerFloat32Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), v)
	}
	return nil
}

type StringPointerFloat32PointerMap map[*string]*float32
	
func (m StringPointerFloat32PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat32(str(k), *v)
	}
	return nil
}

type StringPointerFloat64Map map[*string]float64
	
func (m StringPointerFloat64Map) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), v)
	}
	return nil
}

type StringPointerFloat64PointerMap map[*string]*float64
	
func (m StringPointerFloat64PointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddFloat64(str(k), *v)
	}
	return nil
}

type StringPointerUintptrMap map[*string]uintptr
	
func (m StringPointerUintptrMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), v)
	}
	return nil
}

type StringPointerUintptrPointerMap map[*string]*uintptr
	
func (m StringPointerUintptrPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddUintptr(str(k), *v)
	}
	return nil
}

type StringPointerTimeMap map[*string]time.Time
	
func (m StringPointerTimeMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), v)
	}
	return nil
}

type StringPointerTimePointerMap map[*string]*time.Time
	
func (m StringPointerTimePointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddTime(str(k), *v)
	}
	return nil
}

type StringPointerByteStringMap map[*string][]byte
	
func (m StringPointerByteStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), v)
	}
	return nil
}

type StringPointerByteStringPointerMap map[*string]*[]byte
	
func (m StringPointerByteStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddByteString(str(k), *v)
	}
	return nil
}

type StringPointerInterfaceMap map[*string]interface{}

func (m StringPointerInterfaceMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		err := addObject(encoder, k, v)
		if err != nil {
			return err
		}
	}
	return nil
}

type StringPointerStringMap map[*string]string
	
func (m StringPointerStringMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), v)
	}
	return nil
}

type StringPointerStringPointerMap map[*string]*string
	
func (m StringPointerStringPointerMap) MarshalLogObject(encoder zapcore.ObjectEncoder) error {
	for k, v := range m {
		encoder.AddString(str(k), *v)
	}
	return nil
}

